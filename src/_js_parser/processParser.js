// Generated from /home/kng/repo/vor-stream/cmd/process/process.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';
import processListener from './processListener.js';
import processVisitor from './processVisitor.js';

const serializedATN = [4,1,99,822,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
1,0,1,0,5,0,203,8,0,10,0,12,0,206,9,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,3,
2,216,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,227,8,3,1,4,1,4,1,4,1,
5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,5,8,243,8,8,10,8,12,8,246,9,8,
1,8,3,8,249,8,8,1,9,1,9,1,9,1,9,3,9,255,8,9,1,9,5,9,258,8,9,10,9,12,9,261,
9,9,1,9,1,9,5,9,265,8,9,10,9,12,9,268,9,9,3,9,270,8,9,1,10,1,10,1,10,3,10,
275,8,10,1,10,5,10,278,8,10,10,10,12,10,281,9,10,1,10,1,10,5,10,285,8,10,
10,10,12,10,288,9,10,3,10,290,8,10,1,11,1,11,1,11,1,11,1,11,5,11,297,8,11,
10,11,12,11,300,9,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,5,13,309,8,13,10,
13,12,13,312,9,13,1,13,5,13,315,8,13,10,13,12,13,318,9,13,1,14,1,14,1,14,
1,14,3,14,324,8,14,3,14,326,8,14,1,14,3,14,329,8,14,1,15,1,15,3,15,333,8,
15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
1,19,1,19,1,19,1,19,1,20,1,20,3,20,355,8,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,371,8,20,1,21,1,21,1,22,1,22,
1,22,1,22,1,23,1,23,1,23,3,23,382,8,23,1,23,1,23,1,23,1,23,1,24,1,24,3,24,
390,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,4,27,
404,8,27,11,27,12,27,405,1,27,1,27,3,27,410,8,27,1,27,3,27,413,8,27,1,28,
1,28,4,28,417,8,28,11,28,12,28,418,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
1,29,3,29,444,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,453,8,30,1,31,
1,31,1,31,1,31,1,31,1,31,1,31,3,31,462,8,31,1,32,1,32,1,32,1,32,1,32,1,32,
1,32,1,32,3,32,472,8,32,1,33,1,33,1,33,1,33,1,33,3,33,479,8,33,1,34,1,34,
1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,491,8,35,1,36,1,36,1,36,1,36,
1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,5,39,506,8,39,10,39,12,39,509,
9,39,1,40,1,40,1,41,1,41,1,42,1,42,3,42,517,8,42,1,43,1,43,1,44,1,44,1,45,
1,45,4,45,525,8,45,11,45,12,45,526,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,
46,1,46,3,46,538,8,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,
1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,
53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,575,8,54,1,55,
1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,586,8,55,1,56,1,56,1,56,1,56,
1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,5,59,603,8,59,10,
59,12,59,606,9,59,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,
1,63,1,63,1,63,5,63,622,8,63,10,63,12,63,625,9,63,1,63,1,63,1,64,1,64,5,
64,631,8,64,10,64,12,64,634,9,64,1,64,1,64,1,64,1,64,1,65,1,65,3,65,642,
8,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,651,8,67,1,68,1,68,1,68,3,68,
656,8,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,5,73,
670,8,73,10,73,12,73,673,9,73,1,73,1,73,1,74,1,74,5,74,679,8,74,10,74,12,
74,682,9,74,1,75,1,75,1,75,5,75,687,8,75,10,75,12,75,690,9,75,1,76,1,76,
1,76,3,76,695,8,76,1,77,1,77,3,77,699,8,77,1,78,1,78,1,78,1,78,5,78,705,
8,78,10,78,12,78,708,9,78,3,78,710,8,78,1,78,1,78,1,79,1,79,5,79,716,8,79,
10,79,12,79,719,9,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,728,8,80,10,
80,12,80,731,9,80,1,81,1,81,1,81,1,81,1,82,1,82,1,83,1,83,1,83,1,83,1,84,
1,84,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,
88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,1,92,
1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,3,94,781,8,94,1,95,3,95,784,8,95,
1,95,1,95,1,95,5,95,789,8,95,10,95,12,95,792,9,95,1,95,1,95,1,95,1,95,1,
95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,808,8,95,1,96,1,96,
1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,0,0,100,0,2,4,6,8,
10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
178,180,182,184,186,188,190,192,194,196,198,0,14,3,0,34,34,54,54,66,66,1,
0,46,47,1,0,63,64,2,0,60,60,87,87,1,0,13,22,1,0,82,84,1,0,85,86,2,0,52,52,
78,78,2,0,39,39,80,80,1,0,75,76,1,0,42,43,2,0,45,45,61,61,1,0,90,91,5,0,
30,34,36,38,40,67,69,79,81,93,844,0,204,1,0,0,0,2,209,1,0,0,0,4,215,1,0,
0,0,6,226,1,0,0,0,8,228,1,0,0,0,10,231,1,0,0,0,12,234,1,0,0,0,14,237,1,0,
0,0,16,239,1,0,0,0,18,250,1,0,0,0,20,271,1,0,0,0,22,291,1,0,0,0,24,301,1,
0,0,0,26,305,1,0,0,0,28,319,1,0,0,0,30,330,1,0,0,0,32,337,1,0,0,0,34,341,
1,0,0,0,36,345,1,0,0,0,38,348,1,0,0,0,40,370,1,0,0,0,42,372,1,0,0,0,44,374,
1,0,0,0,46,381,1,0,0,0,48,389,1,0,0,0,50,391,1,0,0,0,52,395,1,0,0,0,54,399,
1,0,0,0,56,416,1,0,0,0,58,443,1,0,0,0,60,452,1,0,0,0,62,461,1,0,0,0,64,471,
1,0,0,0,66,478,1,0,0,0,68,480,1,0,0,0,70,484,1,0,0,0,72,492,1,0,0,0,74,496,
1,0,0,0,76,498,1,0,0,0,78,502,1,0,0,0,80,510,1,0,0,0,82,512,1,0,0,0,84,514,
1,0,0,0,86,518,1,0,0,0,88,520,1,0,0,0,90,522,1,0,0,0,92,537,1,0,0,0,94,539,
1,0,0,0,96,543,1,0,0,0,98,547,1,0,0,0,100,551,1,0,0,0,102,555,1,0,0,0,104,
559,1,0,0,0,106,563,1,0,0,0,108,574,1,0,0,0,110,585,1,0,0,0,112,587,1,0,
0,0,114,591,1,0,0,0,116,595,1,0,0,0,118,599,1,0,0,0,120,607,1,0,0,0,122,
609,1,0,0,0,124,613,1,0,0,0,126,617,1,0,0,0,128,628,1,0,0,0,130,641,1,0,
0,0,132,643,1,0,0,0,134,647,1,0,0,0,136,652,1,0,0,0,138,657,1,0,0,0,140,
659,1,0,0,0,142,661,1,0,0,0,144,663,1,0,0,0,146,665,1,0,0,0,148,676,1,0,
0,0,150,683,1,0,0,0,152,691,1,0,0,0,154,698,1,0,0,0,156,700,1,0,0,0,158,
717,1,0,0,0,160,729,1,0,0,0,162,732,1,0,0,0,164,736,1,0,0,0,166,738,1,0,
0,0,168,742,1,0,0,0,170,746,1,0,0,0,172,748,1,0,0,0,174,752,1,0,0,0,176,
756,1,0,0,0,178,758,1,0,0,0,180,762,1,0,0,0,182,766,1,0,0,0,184,770,1,0,
0,0,186,774,1,0,0,0,188,780,1,0,0,0,190,807,1,0,0,0,192,809,1,0,0,0,194,
811,1,0,0,0,196,815,1,0,0,0,198,819,1,0,0,0,200,203,3,4,2,0,201,203,3,2,
1,0,202,200,1,0,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,
205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,0,0,1,208,1,1,0,0,
0,209,210,5,99,0,0,210,3,1,0,0,0,211,216,3,8,4,0,212,216,3,10,5,0,213,216,
3,12,6,0,214,216,3,6,3,0,215,211,1,0,0,0,215,212,1,0,0,0,215,213,1,0,0,0,
215,214,1,0,0,0,216,5,1,0,0,0,217,227,3,18,9,0,218,227,3,20,10,0,219,227,
3,22,11,0,220,227,3,24,12,0,221,227,3,26,13,0,222,227,5,95,0,0,223,227,5,
96,0,0,224,227,5,98,0,0,225,227,3,16,8,0,226,217,1,0,0,0,226,218,1,0,0,0,
226,219,1,0,0,0,226,220,1,0,0,0,226,221,1,0,0,0,226,222,1,0,0,0,226,223,
1,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,7,1,0,0,0,228,229,5,56,0,0,229,
230,3,188,94,0,230,9,1,0,0,0,231,232,5,35,0,0,232,233,3,176,88,0,233,11,
1,0,0,0,234,235,5,81,0,0,235,236,3,14,7,0,236,13,1,0,0,0,237,238,7,0,0,0,
238,15,1,0,0,0,239,248,3,28,14,0,240,244,5,1,0,0,241,243,3,6,3,0,242,241,
1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,
246,244,1,0,0,0,247,249,5,2,0,0,248,240,1,0,0,0,248,249,1,0,0,0,249,17,1,
0,0,0,250,269,7,1,0,0,251,255,3,30,15,0,252,255,3,32,16,0,253,255,3,34,17,
0,254,251,1,0,0,0,254,252,1,0,0,0,254,253,1,0,0,0,255,259,1,0,0,0,256,258,
3,64,32,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,
0,260,270,1,0,0,0,261,259,1,0,0,0,262,266,3,52,26,0,263,265,3,66,33,0,264,
263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,270,1,0,
0,0,268,266,1,0,0,0,269,254,1,0,0,0,269,262,1,0,0,0,270,19,1,0,0,0,271,289,
7,2,0,0,272,275,3,38,19,0,273,275,3,44,22,0,274,272,1,0,0,0,274,273,1,0,
0,0,275,279,1,0,0,0,276,278,3,60,30,0,277,276,1,0,0,0,278,281,1,0,0,0,279,
277,1,0,0,0,279,280,1,0,0,0,280,290,1,0,0,0,281,279,1,0,0,0,282,286,3,50,
25,0,283,285,3,62,31,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,
287,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,289,274,1,0,0,0,289,282,1,0,
0,0,290,21,1,0,0,0,291,292,5,57,0,0,292,293,3,138,69,0,293,294,3,146,73,
0,294,298,3,144,72,0,295,297,3,108,54,0,296,295,1,0,0,0,297,300,1,0,0,0,
298,296,1,0,0,0,298,299,1,0,0,0,299,23,1,0,0,0,300,298,1,0,0,0,301,302,5,
77,0,0,302,303,3,192,96,0,303,304,3,160,80,0,304,25,1,0,0,0,305,310,5,69,
0,0,306,309,3,126,63,0,307,309,3,128,64,0,308,306,1,0,0,0,308,307,1,0,0,
0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,316,1,0,0,0,312,310,
1,0,0,0,313,315,3,110,55,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,
0,316,317,1,0,0,0,317,27,1,0,0,0,318,316,1,0,0,0,319,320,7,3,0,0,320,325,
3,138,69,0,321,323,3,142,71,0,322,324,3,144,72,0,323,322,1,0,0,0,323,324,
1,0,0,0,324,326,1,0,0,0,325,321,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,
327,329,3,174,87,0,328,327,1,0,0,0,328,329,1,0,0,0,329,29,1,0,0,0,330,332,
3,190,95,0,331,333,5,3,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,
0,334,335,5,4,0,0,335,336,3,188,94,0,336,31,1,0,0,0,337,338,3,46,23,0,338,
339,5,4,0,0,339,340,3,188,94,0,340,33,1,0,0,0,341,342,3,36,18,0,342,343,
5,4,0,0,343,344,3,188,94,0,344,35,1,0,0,0,345,346,3,190,95,0,346,347,5,5,
0,0,347,37,1,0,0,0,348,349,3,42,21,0,349,350,5,4,0,0,350,351,3,40,20,0,351,
39,1,0,0,0,352,354,3,188,94,0,353,355,5,3,0,0,354,353,1,0,0,0,354,355,1,
0,0,0,355,371,1,0,0,0,356,357,5,92,0,0,357,358,5,6,0,0,358,371,3,188,94,
0,359,360,5,65,0,0,360,361,5,6,0,0,361,362,3,188,94,0,362,363,5,6,0,0,363,
364,3,188,94,0,364,365,5,6,0,0,365,366,3,188,94,0,366,371,1,0,0,0,367,368,
5,37,0,0,368,369,5,6,0,0,369,371,3,188,94,0,370,352,1,0,0,0,370,356,1,0,
0,0,370,359,1,0,0,0,370,367,1,0,0,0,371,41,1,0,0,0,372,373,3,188,94,0,373,
43,1,0,0,0,374,375,3,188,94,0,375,376,5,4,0,0,376,377,3,46,23,0,377,45,1,
0,0,0,378,379,3,48,24,0,379,380,5,6,0,0,380,382,1,0,0,0,381,378,1,0,0,0,
381,382,1,0,0,0,382,383,1,0,0,0,383,384,3,48,24,0,384,385,5,6,0,0,385,386,
3,48,24,0,386,47,1,0,0,0,387,390,5,94,0,0,388,390,3,198,99,0,389,387,1,0,
0,0,389,388,1,0,0,0,390,49,1,0,0,0,391,392,3,188,94,0,392,393,5,4,0,0,393,
394,3,54,27,0,394,51,1,0,0,0,395,396,3,54,27,0,396,397,5,4,0,0,397,398,3,
188,94,0,398,53,1,0,0,0,399,403,5,7,0,0,400,401,3,56,28,0,401,402,5,8,0,
0,402,404,1,0,0,0,403,400,1,0,0,0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,
1,0,0,0,406,407,1,0,0,0,407,409,3,56,28,0,408,410,5,3,0,0,409,408,1,0,0,
0,409,410,1,0,0,0,410,412,1,0,0,0,411,413,5,9,0,0,412,411,1,0,0,0,412,413,
1,0,0,0,413,55,1,0,0,0,414,417,3,58,29,0,415,417,5,10,0,0,416,414,1,0,0,
0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,57,
1,0,0,0,420,444,3,188,94,0,421,422,5,11,0,0,422,423,5,92,0,0,423,424,5,6,
0,0,424,425,3,188,94,0,425,426,5,2,0,0,426,444,1,0,0,0,427,428,5,11,0,0,
428,429,5,65,0,0,429,430,5,6,0,0,430,431,3,188,94,0,431,432,5,6,0,0,432,
433,3,188,94,0,433,434,5,6,0,0,434,435,3,188,94,0,435,436,5,2,0,0,436,444,
1,0,0,0,437,438,5,11,0,0,438,439,5,37,0,0,439,440,5,6,0,0,440,441,3,188,
94,0,441,442,5,2,0,0,442,444,1,0,0,0,443,420,1,0,0,0,443,421,1,0,0,0,443,
427,1,0,0,0,443,437,1,0,0,0,444,59,1,0,0,0,445,453,3,172,86,0,446,453,3,
174,87,0,447,453,3,164,82,0,448,453,3,70,35,0,449,453,3,76,38,0,450,453,
3,184,92,0,451,453,3,194,97,0,452,445,1,0,0,0,452,446,1,0,0,0,452,447,1,
0,0,0,452,448,1,0,0,0,452,449,1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,
61,1,0,0,0,454,462,3,172,86,0,455,462,3,174,87,0,456,462,3,164,82,0,457,
462,3,76,38,0,458,462,3,184,92,0,459,462,3,194,97,0,460,462,3,196,98,0,461,
454,1,0,0,0,461,455,1,0,0,0,461,456,1,0,0,0,461,457,1,0,0,0,461,458,1,0,
0,0,461,459,1,0,0,0,461,460,1,0,0,0,462,63,1,0,0,0,463,472,3,172,86,0,464,
472,3,174,87,0,465,472,3,70,35,0,466,472,3,72,36,0,467,472,3,68,34,0,468,
472,3,180,90,0,469,472,3,184,92,0,470,472,3,194,97,0,471,463,1,0,0,0,471,
464,1,0,0,0,471,465,1,0,0,0,471,466,1,0,0,0,471,467,1,0,0,0,471,468,1,0,
0,0,471,469,1,0,0,0,471,470,1,0,0,0,472,65,1,0,0,0,473,479,3,172,86,0,474,
479,3,174,87,0,475,479,3,164,82,0,476,479,3,184,92,0,477,479,3,194,97,0,
478,473,1,0,0,0,478,474,1,0,0,0,478,475,1,0,0,0,478,476,1,0,0,0,478,477,
1,0,0,0,479,67,1,0,0,0,480,481,5,73,0,0,481,482,5,12,0,0,482,483,3,176,88,
0,483,69,1,0,0,0,484,485,5,33,0,0,485,490,5,12,0,0,486,491,3,82,41,0,487,
491,3,84,42,0,488,491,3,86,43,0,489,491,5,69,0,0,490,486,1,0,0,0,490,487,
1,0,0,0,490,488,1,0,0,0,490,489,1,0,0,0,491,71,1,0,0,0,492,493,5,36,0,0,
493,494,5,12,0,0,494,495,3,74,37,0,495,73,1,0,0,0,496,497,7,4,0,0,497,75,
1,0,0,0,498,499,5,38,0,0,499,500,5,12,0,0,500,501,3,78,39,0,501,77,1,0,0,
0,502,507,3,80,40,0,503,504,5,23,0,0,504,506,3,80,40,0,505,503,1,0,0,0,506,
509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,79,1,0,0,0,509,507,1,0,0,
0,510,511,3,188,94,0,511,81,1,0,0,0,512,513,5,59,0,0,513,83,1,0,0,0,514,
516,5,55,0,0,515,517,3,90,45,0,516,515,1,0,0,0,516,517,1,0,0,0,517,85,1,
0,0,0,518,519,5,32,0,0,519,87,1,0,0,0,520,521,5,68,0,0,521,89,1,0,0,0,522,
524,5,1,0,0,523,525,3,92,46,0,524,523,1,0,0,0,525,526,1,0,0,0,526,524,1,
0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,2,0,0,529,91,1,0,0,0,530,
538,3,94,47,0,531,538,3,96,48,0,532,538,3,98,49,0,533,538,3,100,50,0,534,
538,3,102,51,0,535,538,3,104,52,0,536,538,3,106,53,0,537,530,1,0,0,0,537,
531,1,0,0,0,537,532,1,0,0,0,537,533,1,0,0,0,537,534,1,0,0,0,537,535,1,0,
0,0,537,536,1,0,0,0,538,93,1,0,0,0,539,540,5,30,0,0,540,541,5,12,0,0,541,
542,3,170,85,0,542,95,1,0,0,0,543,544,5,40,0,0,544,545,5,12,0,0,545,546,
3,170,85,0,546,97,1,0,0,0,547,548,5,48,0,0,548,549,5,12,0,0,549,550,3,170,
85,0,550,99,1,0,0,0,551,552,5,49,0,0,552,553,5,12,0,0,553,554,3,140,70,0,
554,101,1,0,0,0,555,556,5,67,0,0,556,557,5,12,0,0,557,558,3,140,70,0,558,
103,1,0,0,0,559,560,5,58,0,0,560,561,5,12,0,0,561,562,3,150,75,0,562,105,
1,0,0,0,563,564,5,79,0,0,564,565,5,12,0,0,565,566,3,170,85,0,566,107,1,0,
0,0,567,575,3,174,87,0,568,575,3,178,89,0,569,575,3,180,90,0,570,575,3,182,
91,0,571,575,3,184,92,0,572,575,3,186,93,0,573,575,3,194,97,0,574,567,1,
0,0,0,574,568,1,0,0,0,574,569,1,0,0,0,574,570,1,0,0,0,574,571,1,0,0,0,574,
572,1,0,0,0,574,573,1,0,0,0,575,109,1,0,0,0,576,586,3,172,86,0,577,586,3,
174,87,0,578,586,3,112,56,0,579,586,3,114,57,0,580,586,3,184,92,0,581,586,
3,180,90,0,582,586,3,116,58,0,583,586,3,122,61,0,584,586,3,124,62,0,585,
576,1,0,0,0,585,577,1,0,0,0,585,578,1,0,0,0,585,579,1,0,0,0,585,580,1,0,
0,0,585,581,1,0,0,0,585,582,1,0,0,0,585,583,1,0,0,0,585,584,1,0,0,0,586,
111,1,0,0,0,587,588,5,71,0,0,588,589,5,12,0,0,589,590,3,176,88,0,590,113,
1,0,0,0,591,592,5,51,0,0,592,593,5,12,0,0,593,594,3,176,88,0,594,115,1,0,
0,0,595,596,5,70,0,0,596,597,5,12,0,0,597,598,3,118,59,0,598,117,1,0,0,0,
599,604,3,120,60,0,600,601,5,23,0,0,601,603,3,120,60,0,602,600,1,0,0,0,603,
606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,119,1,0,0,0,606,604,1,0,
0,0,607,608,3,176,88,0,608,121,1,0,0,0,609,610,5,72,0,0,610,611,5,12,0,0,
611,612,3,134,67,0,612,123,1,0,0,0,613,614,5,41,0,0,614,615,5,12,0,0,615,
616,3,188,94,0,616,125,1,0,0,0,617,618,3,152,76,0,618,619,5,4,0,0,619,623,
5,24,0,0,620,622,3,130,65,0,621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,
0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,623,1,0,0,0,626,627,5,25,0,0,627,
127,1,0,0,0,628,632,5,24,0,0,629,631,3,130,65,0,630,629,1,0,0,0,631,634,
1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,635,1,0,0,0,634,632,1,0,0,0,
635,636,5,25,0,0,636,637,5,4,0,0,637,638,3,152,76,0,638,129,1,0,0,0,639,
642,3,132,66,0,640,642,3,136,68,0,641,639,1,0,0,0,641,640,1,0,0,0,642,131,
1,0,0,0,643,644,7,5,0,0,644,645,5,12,0,0,645,646,3,134,67,0,646,133,1,0,
0,0,647,650,3,188,94,0,648,649,5,6,0,0,649,651,3,188,94,0,650,648,1,0,0,
0,650,651,1,0,0,0,651,135,1,0,0,0,652,655,7,6,0,0,653,654,5,12,0,0,654,656,
3,140,70,0,655,653,1,0,0,0,655,656,1,0,0,0,656,137,1,0,0,0,657,658,3,188,
94,0,658,139,1,0,0,0,659,660,5,27,0,0,660,141,1,0,0,0,661,662,3,156,78,0,
662,143,1,0,0,0,663,664,3,156,78,0,664,145,1,0,0,0,665,666,5,24,0,0,666,
671,3,148,74,0,667,668,5,23,0,0,668,670,3,152,76,0,669,667,1,0,0,0,670,673,
1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,671,1,0,0,0,
674,675,5,25,0,0,675,147,1,0,0,0,676,680,3,152,76,0,677,679,3,152,76,0,678,
677,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,149,1,0,
0,0,682,680,1,0,0,0,683,688,3,188,94,0,684,685,5,23,0,0,685,687,3,188,94,
0,686,684,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,0,689,151,
1,0,0,0,690,688,1,0,0,0,691,694,3,188,94,0,692,693,5,12,0,0,693,695,3,154,
77,0,694,692,1,0,0,0,694,695,1,0,0,0,695,153,1,0,0,0,696,699,3,188,94,0,
697,699,3,176,88,0,698,696,1,0,0,0,698,697,1,0,0,0,699,155,1,0,0,0,700,709,
5,24,0,0,701,706,3,152,76,0,702,703,5,23,0,0,703,705,3,152,76,0,704,702,
1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,710,1,0,0,0,
708,706,1,0,0,0,709,701,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,712,
5,25,0,0,712,157,1,0,0,0,713,716,3,172,86,0,714,716,3,174,87,0,715,713,1,
0,0,0,715,714,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,
159,1,0,0,0,719,717,1,0,0,0,720,728,3,172,86,0,721,728,3,174,87,0,722,728,
3,162,81,0,723,728,3,182,91,0,724,728,3,184,92,0,725,728,3,166,83,0,726,
728,3,168,84,0,727,720,1,0,0,0,727,721,1,0,0,0,727,722,1,0,0,0,727,723,1,
0,0,0,727,724,1,0,0,0,727,725,1,0,0,0,727,726,1,0,0,0,728,731,1,0,0,0,729,
727,1,0,0,0,729,730,1,0,0,0,730,161,1,0,0,0,731,729,1,0,0,0,732,733,5,62,
0,0,733,734,5,12,0,0,734,735,3,188,94,0,735,163,1,0,0,0,736,737,5,31,0,0,
737,165,1,0,0,0,738,739,5,53,0,0,739,740,5,12,0,0,740,741,7,7,0,0,741,167,
1,0,0,0,742,743,5,93,0,0,743,744,5,12,0,0,744,745,3,140,70,0,745,169,1,0,
0,0,746,747,7,8,0,0,747,171,1,0,0,0,748,749,5,56,0,0,749,750,5,12,0,0,750,
751,3,188,94,0,751,173,1,0,0,0,752,753,5,35,0,0,753,754,5,12,0,0,754,755,
3,176,88,0,755,175,1,0,0,0,756,757,5,28,0,0,757,177,1,0,0,0,758,759,5,74,
0,0,759,760,5,12,0,0,760,761,3,150,75,0,761,179,1,0,0,0,762,763,5,44,0,0,
763,764,5,12,0,0,764,765,3,150,75,0,765,181,1,0,0,0,766,767,7,9,0,0,767,
768,5,12,0,0,768,769,3,150,75,0,769,183,1,0,0,0,770,771,7,10,0,0,771,772,
5,12,0,0,772,773,3,150,75,0,773,185,1,0,0,0,774,775,5,50,0,0,775,776,5,12,
0,0,776,777,7,11,0,0,777,187,1,0,0,0,778,781,5,94,0,0,779,781,3,198,99,0,
780,778,1,0,0,0,780,779,1,0,0,0,781,189,1,0,0,0,782,784,5,8,0,0,783,782,
1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,790,3,188,94,0,786,787,5,8,0,
0,787,789,3,188,94,0,788,786,1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,790,
791,1,0,0,0,791,808,1,0,0,0,792,790,1,0,0,0,793,794,5,92,0,0,794,795,5,6,
0,0,795,808,3,188,94,0,796,797,5,65,0,0,797,798,5,6,0,0,798,799,3,188,94,
0,799,800,5,6,0,0,800,801,3,188,94,0,801,802,5,6,0,0,802,803,3,188,94,0,
803,808,1,0,0,0,804,805,5,37,0,0,805,806,5,6,0,0,806,808,3,188,94,0,807,
783,1,0,0,0,807,793,1,0,0,0,807,796,1,0,0,0,807,804,1,0,0,0,808,191,1,0,
0,0,809,810,5,26,0,0,810,193,1,0,0,0,811,812,5,88,0,0,812,813,5,12,0,0,813,
814,3,176,88,0,814,195,1,0,0,0,815,816,5,89,0,0,816,817,5,12,0,0,817,818,
7,12,0,0,818,197,1,0,0,0,819,820,7,13,0,0,820,199,1,0,0,0,64,202,204,215,
226,244,248,254,259,266,269,274,279,286,289,298,308,310,316,323,325,328,
332,354,370,381,389,405,409,412,416,418,443,452,461,471,478,490,507,516,
526,537,574,585,604,623,632,641,650,655,671,680,688,694,698,706,709,715,
717,727,729,780,783,790,807];

let isSQLStmt = false;


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class processParser extends antlr4.Parser {

    static grammarFileName = "process.g4";
    static literalNames = [ null, "'{'", "'}'", "'.csv'", "'->'", "'.sas7bdat'", 
                            "'.'", "'s3://'", "'/'", "'.gz'", "'-'", "'${'", 
                            "'='", "'\",\"'", "'',''", "'\"\\t\"'", "''\\t''", 
                            "'\" \"'", "'' ''", "'\";\"'", "'';''", "'\"|\"'", 
                            "''|''", "','", "'('", "')'", null, null, null, 
                            "';'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, "SQLSTMTSEMICOLON", "NUMBER", "STRING", 
                             "SCOL", "CHECK_CONSTRAINTS", "COMPRESS", "CSV", 
                             "DB", "DEFAULT", "DESCR", "DELIM", "DYN", "EXEC_WHEN", 
                             "FALSE", "FIRE_TRIGGERS", "FRAMEWORK", "GETFACT", 
                             "GETDYN", "GETSIG", "GO", "IN", "INPUT", "KEEP_NULLS", 
                             "KB", "LANG", "SASFILE", "MEMORY", "MINIMIZE", 
                             "MODEL", "MSSQL", "NAME", "NODE", "ORDER", 
                             "PG", "PROCESS", "PYTHON", "PREDICT", "OUT", 
                             "OUTPUT", "OPT", "REPORT", "ROWS", "S3", "SAS", 
                             "SASWORK", "SASCMD", "SCENARIODS", "SELECT", 
                             "SETSIG", "SETFACT", "SETDYN", "SQL", "TIME", 
                             "TABLOCK", "TRUE", "TYPE", "DS", "DSN", "DATASET", 
                             "PART", "PARTITIONED", "SUBPROCESS", "WHERE", 
                             "MODE", "APPEND", "REPLACE", "VAR", "SYNTAX_VERSION", 
                             "IDENTIFIER", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", 
                             "SPACES", "NEWLINE", "UNEXPECTED_CHAR" ];
    static ruleNames = [ "parse", "parseerror", "processStmtList", "process", 
                         "nameStmt", "descrStmt", "typeStmt", "processType", 
                         "subprocess", "inStmt", "outStmt", "nodeStmt", 
                         "sqlStmt", "sasStmt", "processStmt", "csvIn", "pgIn", 
                         "sasInput", "datasetName", "csvOut", "csvFile", 
                         "csvOutName", "pgOut", "pgName", "pgAnyName", "s3Out", 
                         "s3In", "s3Path", "s3Component", "s3AnyName", "outOpts", 
                         "s3outOpts", "inOpts", "s3inOpts", "inSelect", 
                         "database", "delim", "delimiters", "execWhen", 
                         "whenList", "whenTag", "pg", "mssql", "csv", "s3", 
                         "bulkStatement", "bulkOpts", "checkConstraints", 
                         "fireTriggers", "keepNulls", "kiloBytesPerBatch", 
                         "rowsPerBatch", "order", "tabLock", "nodeOpts", 
                         "sasOpts", "sascmd", "sasFile", "workDir", "dirList", 
                         "dir", "scenario", "framework", "sasIn", "sasOut", 
                         "sasQueueOpts", "dsName", "dataSet", "partitioned", 
                         "nameSolo", "number", "inputQueues", "outputQueues", 
                         "nodesInputQueues", "mergeList", "nameOrList", 
                         "queue", "namedParameter", "queueList", "nameDescr", 
                         "nameDescrPredict", "predict", "compress", "minimize", 
                         "syntaxVersion", "trueFalse", "name", "descr", 
                         "quoteString", "setSig", "getSig", "setFact", "getFact", 
                         "lang", "anyName", "path", "everythingSemi", "where", 
                         "writeMode", "keyword" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = processParser.ruleNames;
        this.literalNames = processParser.literalNames;
        this.symbolicNames = processParser.symbolicNames;


        // Go version
        // var isSQLStmt bool

        // TypeScript version
        // private isSQLStmt: boolean = false;


    }



	parse() {
	    let localctx = new ParseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, processParser.RULE_parse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 845158401) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 1812205825) !== 0)) {
	            this.state = 202;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 35:
	            case 46:
	            case 47:
	            case 56:
	            case 57:
	            case 60:
	            case 63:
	            case 64:
	            case 69:
	            case 77:
	            case 81:
	            case 87:
	            case 95:
	            case 96:
	            case 98:
	                this.state = 200;
	                this.processStmtList();
	                break;
	            case 99:
	                this.state = 201;
	                this.parseerror();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 207;
	        this.match(processParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parseerror() {
	    let localctx = new ParseerrorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, processParser.RULE_parseerror);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this.match(processParser.UNEXPECTED_CHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	processStmtList() {
	    let localctx = new ProcessStmtListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, processParser.RULE_processStmtList);
	    try {
	        this.state = 215;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 211;
	            this.nameStmt();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 212;
	            this.descrStmt();
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 213;
	            this.typeStmt();
	            break;
	        case 46:
	        case 47:
	        case 57:
	        case 60:
	        case 63:
	        case 64:
	        case 69:
	        case 77:
	        case 87:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 214;
	            this.process();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	process() {
	    let localctx = new ProcessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, processParser.RULE_process);
	    try {
	        this.state = 226;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	        case 47:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 217;
	            this.inStmt();
	            break;
	        case 63:
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 218;
	            this.outStmt();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 219;
	            this.nodeStmt();
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 220;
	            this.sqlStmt();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 221;
	            this.sasStmt();
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 222;
	            this.match(processParser.SINGLE_LINE_COMMENT);
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 223;
	            this.match(processParser.MULTILINE_COMMENT);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 224;
	            this.match(processParser.NEWLINE);
	            break;
	        case 60:
	        case 87:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 225;
	            this.subprocess();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameStmt() {
	    let localctx = new NameStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, processParser.RULE_nameStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 228;
	        this.match(processParser.NAME);
	        this.state = 229;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descrStmt() {
	    let localctx = new DescrStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, processParser.RULE_descrStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 231;
	        this.match(processParser.DESCR);
	        this.state = 232;
	        this.quoteString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStmt() {
	    let localctx = new TypeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, processParser.RULE_typeStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 234;
	        this.match(processParser.TYPE);
	        this.state = 235;
	        this.processType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	processType() {
	    let localctx = new ProcessTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, processParser.RULE_processType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237;
	        _la = this._input.LA(1);
	        if(!(_la===34 || _la===54 || _la===66)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprocess() {
	    let localctx = new SubprocessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, processParser.RULE_subprocess);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        this.processStmt();
	        this.state = 248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 240;
	            this.match(processParser.T__0);
	            this.state = 244;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 2156283907) !== 0) || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 2817) !== 0)) {
	                this.state = 241;
	                this.process();
	                this.state = 246;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 247;
	            this.match(processParser.T__1);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inStmt() {
	    let localctx = new InStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, processParser.RULE_inStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 250;
	        _la = this._input.LA(1);
	        if(!(_la===46 || _la===47)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 269;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	            this.state = 254;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 251;
	                this.csvIn();
	                break;

	            case 2:
	                this.state = 252;
	                this.pgIn();
	                break;

	            case 3:
	                this.state = 253;
	                this.sasInput();
	                break;

	            }
	            this.state = 259;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 256;
	                    this.inOpts(); 
	                }
	                this.state = 261;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	            }

	            break;
	        case 7:
	            this.state = 262;
	            this.s3In();
	            this.state = 266;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 263;
	                    this.s3inOpts(); 
	                }
	                this.state = 268;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outStmt() {
	    let localctx = new OutStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, processParser.RULE_outStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===64)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 274;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 272;
	                this.csvOut();
	                break;

	            case 2:
	                this.state = 273;
	                this.pgOut();
	                break;

	            }
	            this.state = 279;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 276;
	                    this.outOpts(); 
	                }
	                this.state = 281;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	            }

	            break;

	        case 2:
	            this.state = 282;
	            this.s3Out();
	            this.state = 286;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 283;
	                    this.s3outOpts(); 
	                }
	                this.state = 288;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeStmt() {
	    let localctx = new NodeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, processParser.RULE_nodeStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this.match(processParser.NODE);
	        this.state = 292;
	        this.nameSolo();
	        this.state = 293;
	        this.nodesInputQueues();
	        this.state = 294;
	        this.outputQueues();
	        this.state = 298;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 295;
	                this.nodeOpts(); 
	            }
	            this.state = 300;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStmt() {
	    let localctx = new SqlStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, processParser.RULE_sqlStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 301;
	        this.match(processParser.SQL);
	        this.state = 302;
	        this.everythingSemi();
	        this.state = 303;
	        this.nameDescrPredict();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sasStmt() {
	    let localctx = new SasStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, processParser.RULE_sasStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 305;
	        this.match(processParser.SAS);
	        this.state = 310;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 308;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 30:
	                case 31:
	                case 32:
	                case 33:
	                case 34:
	                case 36:
	                case 37:
	                case 38:
	                case 40:
	                case 41:
	                case 42:
	                case 43:
	                case 44:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 50:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 55:
	                case 56:
	                case 57:
	                case 58:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                    this.state = 306;
	                    this.sasIn();
	                    break;
	                case 24:
	                    this.state = 307;
	                    this.sasOut();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 312;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	        this.state = 316;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 313;
	                this.sasOpts(); 
	            }
	            this.state = 318;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	processStmt() {
	    let localctx = new ProcessStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, processParser.RULE_processStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        _la = this._input.LA(1);
	        if(!(_la===60 || _la===87)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 320;
	        this.nameSolo();
	        this.state = 325;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 321;
	            this.inputQueues();
	            this.state = 323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 322;
	                this.outputQueues();
	            }

	        }

	        this.state = 328;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 327;
	            this.descr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csvIn() {
	    let localctx = new CsvInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, processParser.RULE_csvIn);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 330;
	        this.path();
	        this.state = 332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 331;
	            this.match(processParser.T__2);
	        }

	        this.state = 334;
	        this.match(processParser.T__3);
	        this.state = 335;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pgIn() {
	    let localctx = new PgInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, processParser.RULE_pgIn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this.pgName();
	        this.state = 338;
	        this.match(processParser.T__3);
	        this.state = 339;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sasInput() {
	    let localctx = new SasInputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, processParser.RULE_sasInput);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 341;
	        localctx.dataset = this.datasetName();
	        this.state = 342;
	        this.match(processParser.T__3);
	        this.state = 343;
	        localctx.queueName = this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datasetName() {
	    let localctx = new DatasetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, processParser.RULE_datasetName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        this.path();
	        this.state = 346;
	        this.match(processParser.T__4);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csvOut() {
	    let localctx = new CsvOutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, processParser.RULE_csvOut);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        this.csvOutName();
	        this.state = 349;
	        this.match(processParser.T__3);
	        this.state = 350;
	        this.csvFile();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csvFile() {
	    let localctx = new CsvFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, processParser.RULE_csvFile);
	    var _la = 0;
	    try {
	        this.state = 370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 352;
	            this.anyName();
	            this.state = 354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3) {
	                this.state = 353;
	                this.match(processParser.T__2);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 356;
	            this.match(processParser.VAR);
	            this.state = 357;
	            this.match(processParser.T__5);
	            this.state = 358;
	            this.anyName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 359;
	            this.match(processParser.OPT);
	            this.state = 360;
	            this.match(processParser.T__5);
	            this.state = 361;
	            this.anyName();
	            this.state = 362;
	            this.match(processParser.T__5);
	            this.state = 363;
	            this.anyName();
	            this.state = 364;
	            this.match(processParser.T__5);
	            this.state = 365;
	            this.anyName();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 367;
	            this.match(processParser.DYN);
	            this.state = 368;
	            this.match(processParser.T__5);
	            this.state = 369;
	            this.anyName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csvOutName() {
	    let localctx = new CsvOutNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, processParser.RULE_csvOutName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pgOut() {
	    let localctx = new PgOutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, processParser.RULE_pgOut);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 374;
	        this.anyName();
	        this.state = 375;
	        this.match(processParser.T__3);
	        this.state = 376;
	        this.pgName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pgName() {
	    let localctx = new PgNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, processParser.RULE_pgName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 381;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 378;
	            this.pgAnyName();
	            this.state = 379;
	            this.match(processParser.T__5);

	        }
	        this.state = 383;
	        this.pgAnyName();
	        this.state = 384;
	        this.match(processParser.T__5);
	        this.state = 385;
	        this.pgAnyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pgAnyName() {
	    let localctx = new PgAnyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, processParser.RULE_pgAnyName);
	    try {
	        this.state = 389;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 387;
	            this.match(processParser.IDENTIFIER);
	            break;
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 388;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3Out() {
	    let localctx = new S3OutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, processParser.RULE_s3Out);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        localctx.s3Input = this.anyName();
	        this.state = 392;
	        this.match(processParser.T__3);
	        this.state = 393;
	        this.s3Path();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3In() {
	    let localctx = new S3InContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, processParser.RULE_s3In);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this.s3Path();
	        this.state = 396;
	        this.match(processParser.T__3);
	        this.state = 397;
	        localctx.s3Output = this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3Path() {
	    let localctx = new S3PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, processParser.RULE_s3Path);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.match(processParser.T__6);
	        this.state = 403; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 400;
	        		this.s3Component();
	        		this.state = 401;
	        		this.match(processParser.T__7);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 405; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,26, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 407;
	        this.s3Component();
	        this.state = 409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 408;
	            this.match(processParser.T__2);
	        }

	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 411;
	            this.match(processParser.T__8);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3Component() {
	    let localctx = new S3ComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, processParser.RULE_s3Component);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 416;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case 11:
	        		case 30:
	        		case 31:
	        		case 32:
	        		case 33:
	        		case 34:
	        		case 36:
	        		case 37:
	        		case 38:
	        		case 40:
	        		case 41:
	        		case 42:
	        		case 43:
	        		case 44:
	        		case 45:
	        		case 46:
	        		case 47:
	        		case 48:
	        		case 49:
	        		case 50:
	        		case 51:
	        		case 52:
	        		case 53:
	        		case 54:
	        		case 55:
	        		case 56:
	        		case 57:
	        		case 58:
	        		case 59:
	        		case 60:
	        		case 61:
	        		case 62:
	        		case 63:
	        		case 64:
	        		case 65:
	        		case 66:
	        		case 67:
	        		case 69:
	        		case 70:
	        		case 71:
	        		case 72:
	        		case 73:
	        		case 74:
	        		case 75:
	        		case 76:
	        		case 77:
	        		case 78:
	        		case 79:
	        		case 81:
	        		case 82:
	        		case 83:
	        		case 84:
	        		case 85:
	        		case 86:
	        		case 87:
	        		case 88:
	        		case 89:
	        		case 90:
	        		case 91:
	        		case 92:
	        		case 93:
	        		case 94:
	        		    this.state = 414;
	        		    this.s3AnyName();
	        		    break;
	        		case 10:
	        		    this.state = 415;
	        		    this.match(processParser.T__9);
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 418; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,30, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3AnyName() {
	    let localctx = new S3AnyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, processParser.RULE_s3AnyName);
	    try {
	        this.state = 443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 420;
	            this.anyName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 421;
	            this.match(processParser.T__10);
	            this.state = 422;
	            this.match(processParser.VAR);
	            this.state = 423;
	            this.match(processParser.T__5);
	            this.state = 424;
	            this.anyName();
	            this.state = 425;
	            this.match(processParser.T__1);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 427;
	            this.match(processParser.T__10);
	            this.state = 428;
	            this.match(processParser.OPT);
	            this.state = 429;
	            this.match(processParser.T__5);
	            this.state = 430;
	            this.anyName();
	            this.state = 431;
	            this.match(processParser.T__5);
	            this.state = 432;
	            this.anyName();
	            this.state = 433;
	            this.match(processParser.T__5);
	            this.state = 434;
	            this.anyName();
	            this.state = 435;
	            this.match(processParser.T__1);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 437;
	            this.match(processParser.T__10);
	            this.state = 438;
	            this.match(processParser.DYN);
	            this.state = 439;
	            this.match(processParser.T__5);
	            this.state = 440;
	            this.anyName();
	            this.state = 441;
	            this.match(processParser.T__1);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outOpts() {
	    let localctx = new OutOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, processParser.RULE_outOpts);
	    try {
	        this.state = 452;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 445;
	            this.name();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 446;
	            this.descr();
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 447;
	            this.compress();
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 448;
	            this.database();
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 449;
	            this.execWhen();
	            break;
	        case 42:
	        case 43:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 450;
	            this.getFact();
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 451;
	            this.where();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3outOpts() {
	    let localctx = new S3outOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, processParser.RULE_s3outOpts);
	    try {
	        this.state = 461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 454;
	            this.name();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 455;
	            this.descr();
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 456;
	            this.compress();
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 457;
	            this.execWhen();
	            break;
	        case 42:
	        case 43:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 458;
	            this.getFact();
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 459;
	            this.where();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 460;
	            this.writeMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inOpts() {
	    let localctx = new InOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, processParser.RULE_inOpts);
	    try {
	        this.state = 471;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 463;
	            this.name();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 464;
	            this.descr();
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 465;
	            this.database();
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 466;
	            this.delim();
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 467;
	            this.inSelect();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 468;
	            this.getSig();
	            break;
	        case 42:
	        case 43:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 469;
	            this.getFact();
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 470;
	            this.where();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3inOpts() {
	    let localctx = new S3inOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, processParser.RULE_s3inOpts);
	    try {
	        this.state = 478;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 473;
	            this.name();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 474;
	            this.descr();
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 475;
	            this.compress();
	            break;
	        case 42:
	        case 43:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 476;
	            this.getFact();
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 477;
	            this.where();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inSelect() {
	    let localctx = new InSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, processParser.RULE_inSelect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this.match(processParser.SELECT);
	        this.state = 481;
	        this.match(processParser.T__11);
	        this.state = 482;
	        this.quoteString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	database() {
	    let localctx = new DatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, processParser.RULE_database);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this.match(processParser.DB);
	        this.state = 485;
	        this.match(processParser.T__11);
	        this.state = 490;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.state = 486;
	            this.pg();
	            break;
	        case 55:
	            this.state = 487;
	            this.mssql();
	            break;
	        case 32:
	            this.state = 488;
	            this.csv();
	            break;
	        case 69:
	            this.state = 489;
	            this.match(processParser.SAS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delim() {
	    let localctx = new DelimContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, processParser.RULE_delim);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 492;
	        this.match(processParser.DELIM);
	        this.state = 493;
	        this.match(processParser.T__11);
	        this.state = 494;
	        this.delimiters();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimiters() {
	    let localctx = new DelimitersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, processParser.RULE_delimiters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 8380416) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execWhen() {
	    let localctx = new ExecWhenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, processParser.RULE_execWhen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 498;
	        this.match(processParser.EXEC_WHEN);
	        this.state = 499;
	        this.match(processParser.T__11);
	        this.state = 500;
	        this.whenList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenList() {
	    let localctx = new WhenListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, processParser.RULE_whenList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this.whenTag();
	        this.state = 507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 503;
	            this.match(processParser.T__22);
	            this.state = 504;
	            this.whenTag();
	            this.state = 509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenTag() {
	    let localctx = new WhenTagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, processParser.RULE_whenTag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 510;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pg() {
	    let localctx = new PgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, processParser.RULE_pg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(processParser.PG);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mssql() {
	    let localctx = new MssqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, processParser.RULE_mssql);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this.match(processParser.MSSQL);
	        this.state = 516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 515;
	            this.bulkStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csv() {
	    let localctx = new CsvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, processParser.RULE_csv);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        this.match(processParser.CSV);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s3() {
	    let localctx = new S3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, processParser.RULE_s3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this.match(processParser.S3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bulkStatement() {
	    let localctx = new BulkStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, processParser.RULE_bulkStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(processParser.T__0);
	        this.state = 524; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 523;
	            this.bulkOpts();
	            this.state = 526; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 269222913) !== 0) || _la===67 || _la===79);
	        this.state = 528;
	        this.match(processParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bulkOpts() {
	    let localctx = new BulkOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, processParser.RULE_bulkOpts);
	    try {
	        this.state = 537;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 530;
	            this.checkConstraints();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 531;
	            this.fireTriggers();
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 532;
	            this.keepNulls();
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 533;
	            this.kiloBytesPerBatch();
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 534;
	            this.rowsPerBatch();
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 535;
	            this.order();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 536;
	            this.tabLock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkConstraints() {
	    let localctx = new CheckConstraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, processParser.RULE_checkConstraints);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this.match(processParser.CHECK_CONSTRAINTS);
	        this.state = 540;
	        this.match(processParser.T__11);
	        this.state = 541;
	        this.trueFalse();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fireTriggers() {
	    let localctx = new FireTriggersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, processParser.RULE_fireTriggers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.match(processParser.FIRE_TRIGGERS);
	        this.state = 544;
	        this.match(processParser.T__11);
	        this.state = 545;
	        this.trueFalse();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keepNulls() {
	    let localctx = new KeepNullsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, processParser.RULE_keepNulls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 547;
	        this.match(processParser.KEEP_NULLS);
	        this.state = 548;
	        this.match(processParser.T__11);
	        this.state = 549;
	        this.trueFalse();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kiloBytesPerBatch() {
	    let localctx = new KiloBytesPerBatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, processParser.RULE_kiloBytesPerBatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.match(processParser.KB);
	        this.state = 552;
	        this.match(processParser.T__11);
	        this.state = 553;
	        this.number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsPerBatch() {
	    let localctx = new RowsPerBatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, processParser.RULE_rowsPerBatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        this.match(processParser.ROWS);
	        this.state = 556;
	        this.match(processParser.T__11);
	        this.state = 557;
	        this.number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order() {
	    let localctx = new OrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, processParser.RULE_order);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this.match(processParser.ORDER);
	        this.state = 560;
	        this.match(processParser.T__11);
	        this.state = 561;
	        this.nameOrList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabLock() {
	    let localctx = new TabLockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, processParser.RULE_tabLock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.match(processParser.TABLOCK);
	        this.state = 564;
	        this.match(processParser.T__11);
	        this.state = 565;
	        this.trueFalse();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeOpts() {
	    let localctx = new NodeOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, processParser.RULE_nodeOpts);
	    try {
	        this.state = 574;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 567;
	            this.descr();
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 568;
	            this.setSig();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 569;
	            this.getSig();
	            break;
	        case 75:
	        case 76:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 570;
	            this.setFact();
	            break;
	        case 42:
	        case 43:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 571;
	            this.getFact();
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 572;
	            this.lang();
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 573;
	            this.where();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sasOpts() {
	    let localctx = new SasOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, processParser.RULE_sasOpts);
	    try {
	        this.state = 585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 576;
	            this.name();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 577;
	            this.descr();
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 578;
	            this.sascmd();
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 579;
	            this.sasFile();
	            break;
	        case 42:
	        case 43:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 580;
	            this.getFact();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 581;
	            this.getSig();
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 582;
	            this.workDir();
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 583;
	            this.scenario();
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 584;
	            this.framework();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sascmd() {
	    let localctx = new SascmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, processParser.RULE_sascmd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.match(processParser.SASCMD);
	        this.state = 588;
	        this.match(processParser.T__11);
	        this.state = 589;
	        this.quoteString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sasFile() {
	    let localctx = new SasFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, processParser.RULE_sasFile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.match(processParser.SASFILE);
	        this.state = 592;
	        this.match(processParser.T__11);
	        this.state = 593;
	        this.quoteString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	workDir() {
	    let localctx = new WorkDirContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, processParser.RULE_workDir);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 595;
	        this.match(processParser.SASWORK);
	        this.state = 596;
	        this.match(processParser.T__11);
	        this.state = 597;
	        this.dirList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirList() {
	    let localctx = new DirListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, processParser.RULE_dirList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this.dir();
	        this.state = 604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 600;
	            this.match(processParser.T__22);
	            this.state = 601;
	            this.dir();
	            this.state = 606;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dir() {
	    let localctx = new DirContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, processParser.RULE_dir);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.quoteString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scenario() {
	    let localctx = new ScenarioContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, processParser.RULE_scenario);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        this.match(processParser.SCENARIODS);
	        this.state = 610;
	        this.match(processParser.T__11);
	        this.state = 611;
	        this.dataSet();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	framework() {
	    let localctx = new FrameworkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, processParser.RULE_framework);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 613;
	        this.match(processParser.FRAMEWORK);
	        this.state = 614;
	        this.match(processParser.T__11);
	        this.state = 615;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sasIn() {
	    let localctx = new SasInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, processParser.RULE_sasIn);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.queue();
	        this.state = 618;
	        this.match(processParser.T__3);
	        this.state = 619;
	        this.match(processParser.T__23);
	        this.state = 623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 31) !== 0)) {
	            this.state = 620;
	            this.sasQueueOpts();
	            this.state = 625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 626;
	        this.match(processParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sasOut() {
	    let localctx = new SasOutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, processParser.RULE_sasOut);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.match(processParser.T__23);
	        this.state = 632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 31) !== 0)) {
	            this.state = 629;
	            this.sasQueueOpts();
	            this.state = 634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 635;
	        this.match(processParser.T__24);
	        this.state = 636;
	        this.match(processParser.T__3);
	        this.state = 637;
	        this.queue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sasQueueOpts() {
	    let localctx = new SasQueueOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, processParser.RULE_sasQueueOpts);
	    try {
	        this.state = 641;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 82:
	        case 83:
	        case 84:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 639;
	            this.dsName();
	            break;
	        case 85:
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 640;
	            this.partitioned();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dsName() {
	    let localctx = new DsNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, processParser.RULE_dsName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        _la = this._input.LA(1);
	        if(!(((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 644;
	        this.match(processParser.T__11);
	        this.state = 645;
	        this.dataSet();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataSet() {
	    let localctx = new DataSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, processParser.RULE_dataSet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.anyName();
	        this.state = 650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 648;
	            this.match(processParser.T__5);
	            this.state = 649;
	            this.anyName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitioned() {
	    let localctx = new PartitionedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, processParser.RULE_partitioned);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        _la = this._input.LA(1);
	        if(!(_la===85 || _la===86)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 653;
	            this.match(processParser.T__11);
	            this.state = 654;
	            this.number();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameSolo() {
	    let localctx = new NameSoloContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, processParser.RULE_nameSolo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, processParser.RULE_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 659;
	        this.match(processParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputQueues() {
	    let localctx = new InputQueuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, processParser.RULE_inputQueues);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.queueList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outputQueues() {
	    let localctx = new OutputQueuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, processParser.RULE_outputQueues);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        this.queueList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodesInputQueues() {
	    let localctx = new NodesInputQueuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, processParser.RULE_nodesInputQueues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.match(processParser.T__23);
	        this.state = 666;
	        localctx.mergeLst = this.mergeList();
	        this.state = 671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 667;
	            this.match(processParser.T__22);
	            this.state = 668;
	            this.queue();
	            this.state = 673;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 674;
	        this.match(processParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeList() {
	    let localctx = new MergeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, processParser.RULE_mergeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this.queue();
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30 || _la===31 || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967159) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 2147418095) !== 0)) {
	            this.state = 677;
	            this.queue();
	            this.state = 682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameOrList() {
	    let localctx = new NameOrListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, processParser.RULE_nameOrList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.anyName();
	        this.state = 688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 684;
	            this.match(processParser.T__22);
	            this.state = 685;
	            this.anyName();
	            this.state = 690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queue() {
	    let localctx = new QueueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, processParser.RULE_queue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        this.anyName();
	        this.state = 694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 692;
	            this.match(processParser.T__11);
	            this.state = 693;
	            this.namedParameter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedParameter() {
	    let localctx = new NamedParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, processParser.RULE_namedParameter);
	    try {
	        this.state = 698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 696;
	            this.anyName();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 697;
	            this.quoteString();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queueList() {
	    let localctx = new QueueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, processParser.RULE_queueList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.match(processParser.T__23);
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30 || _la===31 || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967159) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 2147418095) !== 0)) {
	            this.state = 701;
	            this.queue();
	            this.state = 706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23) {
	                this.state = 702;
	                this.match(processParser.T__22);
	                this.state = 703;
	                this.queue();
	                this.state = 708;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 711;
	        this.match(processParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameDescr() {
	    let localctx = new NameDescrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, processParser.RULE_nameDescr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35 || _la===56) {
	            this.state = 715;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 56:
	                this.state = 713;
	                this.name();
	                break;
	            case 35:
	                this.state = 714;
	                this.descr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameDescrPredict() {
	    let localctx = new NameDescrPredictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, processParser.RULE_nameDescrPredict);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 727;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 56:
	                    this.state = 720;
	                    this.name();
	                    break;
	                case 35:
	                    this.state = 721;
	                    this.descr();
	                    break;
	                case 62:
	                    this.state = 722;
	                    this.predict();
	                    break;
	                case 75:
	                case 76:
	                    this.state = 723;
	                    this.setFact();
	                    break;
	                case 42:
	                case 43:
	                    this.state = 724;
	                    this.getFact();
	                    break;
	                case 53:
	                    this.state = 725;
	                    this.minimize();
	                    break;
	                case 93:
	                    this.state = 726;
	                    this.syntaxVersion();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 731;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predict() {
	    let localctx = new PredictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, processParser.RULE_predict);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        this.match(processParser.PREDICT);
	        this.state = 733;
	        this.match(processParser.T__11);
	        this.state = 734;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compress() {
	    let localctx = new CompressContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, processParser.RULE_compress);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.match(processParser.COMPRESS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minimize() {
	    let localctx = new MinimizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, processParser.RULE_minimize);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 738;
	        this.match(processParser.MINIMIZE);
	        this.state = 739;
	        this.match(processParser.T__11);
	        this.state = 740;
	        _la = this._input.LA(1);
	        if(!(_la===52 || _la===78)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxVersion() {
	    let localctx = new SyntaxVersionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, processParser.RULE_syntaxVersion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 742;
	        this.match(processParser.SYNTAX_VERSION);
	        this.state = 743;
	        this.match(processParser.T__11);
	        this.state = 744;
	        this.number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trueFalse() {
	    let localctx = new TrueFalseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, processParser.RULE_trueFalse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===80)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, processParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this.match(processParser.NAME);
	        this.state = 749;
	        this.match(processParser.T__11);
	        this.state = 750;
	        this.anyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descr() {
	    let localctx = new DescrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, processParser.RULE_descr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.match(processParser.DESCR);
	        this.state = 753;
	        this.match(processParser.T__11);
	        this.state = 754;
	        this.quoteString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quoteString() {
	    let localctx = new QuoteStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, processParser.RULE_quoteString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 756;
	        this.match(processParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setSig() {
	    let localctx = new SetSigContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, processParser.RULE_setSig);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        this.match(processParser.SETSIG);
	        this.state = 759;
	        this.match(processParser.T__11);
	        this.state = 760;
	        this.nameOrList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getSig() {
	    let localctx = new GetSigContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, processParser.RULE_getSig);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.match(processParser.GETSIG);
	        this.state = 763;
	        this.match(processParser.T__11);
	        this.state = 764;
	        this.nameOrList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setFact() {
	    let localctx = new SetFactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, processParser.RULE_setFact);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        _la = this._input.LA(1);
	        if(!(_la===75 || _la===76)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 767;
	        this.match(processParser.T__11);
	        this.state = 768;
	        this.nameOrList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getFact() {
	    let localctx = new GetFactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, processParser.RULE_getFact);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 770;
	        _la = this._input.LA(1);
	        if(!(_la===42 || _la===43)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 771;
	        this.match(processParser.T__11);
	        this.state = 772;
	        this.nameOrList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lang() {
	    let localctx = new LangContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, processParser.RULE_lang);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.match(processParser.LANG);
	        this.state = 775;
	        this.match(processParser.T__11);
	        this.state = 776;
	        _la = this._input.LA(1);
	        if(!(_la===45 || _la===61)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyName() {
	    let localctx = new AnyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, processParser.RULE_anyName);
	    try {
	        this.state = 780;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 778;
	            this.match(processParser.IDENTIFIER);
	            break;
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 779;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, processParser.RULE_path);
	    var _la = 0;
	    try {
	        this.state = 807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 783;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===8) {
	                this.state = 782;
	                this.match(processParser.T__7);
	            }

	            this.state = 785;
	            this.anyName();
	            this.state = 790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===8) {
	                this.state = 786;
	                this.match(processParser.T__7);
	                this.state = 787;
	                this.anyName();
	                this.state = 792;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 793;
	            this.match(processParser.VAR);
	            this.state = 794;
	            this.match(processParser.T__5);
	            this.state = 795;
	            this.anyName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 796;
	            this.match(processParser.OPT);
	            this.state = 797;
	            this.match(processParser.T__5);
	            this.state = 798;
	            this.anyName();
	            this.state = 799;
	            this.match(processParser.T__5);
	            this.state = 800;
	            this.anyName();
	            this.state = 801;
	            this.match(processParser.T__5);
	            this.state = 802;
	            this.anyName();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 804;
	            this.match(processParser.DYN);
	            this.state = 805;
	            this.match(processParser.T__5);
	            this.state = 806;
	            this.anyName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	everythingSemi() {
	    let localctx = new EverythingSemiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, processParser.RULE_everythingSemi);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 809;
	        this.match(processParser.SQLSTMTSEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where() {
	    let localctx = new WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, processParser.RULE_where);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.match(processParser.WHERE);
	        this.state = 812;
	        this.match(processParser.T__11);
	        this.state = 813;
	        this.quoteString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeMode() {
	    let localctx = new WriteModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, processParser.RULE_writeMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.match(processParser.MODE);
	        this.state = 816;
	        this.match(processParser.T__11);
	        this.state = 817;
	        _la = this._input.LA(1);
	        if(!(_la===90 || _la===91)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, processParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 819;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4294966751) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294705087) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

processParser.EOF = antlr4.Token.EOF;
processParser.T__0 = 1;
processParser.T__1 = 2;
processParser.T__2 = 3;
processParser.T__3 = 4;
processParser.T__4 = 5;
processParser.T__5 = 6;
processParser.T__6 = 7;
processParser.T__7 = 8;
processParser.T__8 = 9;
processParser.T__9 = 10;
processParser.T__10 = 11;
processParser.T__11 = 12;
processParser.T__12 = 13;
processParser.T__13 = 14;
processParser.T__14 = 15;
processParser.T__15 = 16;
processParser.T__16 = 17;
processParser.T__17 = 18;
processParser.T__18 = 19;
processParser.T__19 = 20;
processParser.T__20 = 21;
processParser.T__21 = 22;
processParser.T__22 = 23;
processParser.T__23 = 24;
processParser.T__24 = 25;
processParser.SQLSTMTSEMICOLON = 26;
processParser.NUMBER = 27;
processParser.STRING = 28;
processParser.SCOL = 29;
processParser.CHECK_CONSTRAINTS = 30;
processParser.COMPRESS = 31;
processParser.CSV = 32;
processParser.DB = 33;
processParser.DEFAULT = 34;
processParser.DESCR = 35;
processParser.DELIM = 36;
processParser.DYN = 37;
processParser.EXEC_WHEN = 38;
processParser.FALSE = 39;
processParser.FIRE_TRIGGERS = 40;
processParser.FRAMEWORK = 41;
processParser.GETFACT = 42;
processParser.GETDYN = 43;
processParser.GETSIG = 44;
processParser.GO = 45;
processParser.IN = 46;
processParser.INPUT = 47;
processParser.KEEP_NULLS = 48;
processParser.KB = 49;
processParser.LANG = 50;
processParser.SASFILE = 51;
processParser.MEMORY = 52;
processParser.MINIMIZE = 53;
processParser.MODEL = 54;
processParser.MSSQL = 55;
processParser.NAME = 56;
processParser.NODE = 57;
processParser.ORDER = 58;
processParser.PG = 59;
processParser.PROCESS = 60;
processParser.PYTHON = 61;
processParser.PREDICT = 62;
processParser.OUT = 63;
processParser.OUTPUT = 64;
processParser.OPT = 65;
processParser.REPORT = 66;
processParser.ROWS = 67;
processParser.S3 = 68;
processParser.SAS = 69;
processParser.SASWORK = 70;
processParser.SASCMD = 71;
processParser.SCENARIODS = 72;
processParser.SELECT = 73;
processParser.SETSIG = 74;
processParser.SETFACT = 75;
processParser.SETDYN = 76;
processParser.SQL = 77;
processParser.TIME = 78;
processParser.TABLOCK = 79;
processParser.TRUE = 80;
processParser.TYPE = 81;
processParser.DS = 82;
processParser.DSN = 83;
processParser.DATASET = 84;
processParser.PART = 85;
processParser.PARTITIONED = 86;
processParser.SUBPROCESS = 87;
processParser.WHERE = 88;
processParser.MODE = 89;
processParser.APPEND = 90;
processParser.REPLACE = 91;
processParser.VAR = 92;
processParser.SYNTAX_VERSION = 93;
processParser.IDENTIFIER = 94;
processParser.SINGLE_LINE_COMMENT = 95;
processParser.MULTILINE_COMMENT = 96;
processParser.SPACES = 97;
processParser.NEWLINE = 98;
processParser.UNEXPECTED_CHAR = 99;

processParser.RULE_parse = 0;
processParser.RULE_parseerror = 1;
processParser.RULE_processStmtList = 2;
processParser.RULE_process = 3;
processParser.RULE_nameStmt = 4;
processParser.RULE_descrStmt = 5;
processParser.RULE_typeStmt = 6;
processParser.RULE_processType = 7;
processParser.RULE_subprocess = 8;
processParser.RULE_inStmt = 9;
processParser.RULE_outStmt = 10;
processParser.RULE_nodeStmt = 11;
processParser.RULE_sqlStmt = 12;
processParser.RULE_sasStmt = 13;
processParser.RULE_processStmt = 14;
processParser.RULE_csvIn = 15;
processParser.RULE_pgIn = 16;
processParser.RULE_sasInput = 17;
processParser.RULE_datasetName = 18;
processParser.RULE_csvOut = 19;
processParser.RULE_csvFile = 20;
processParser.RULE_csvOutName = 21;
processParser.RULE_pgOut = 22;
processParser.RULE_pgName = 23;
processParser.RULE_pgAnyName = 24;
processParser.RULE_s3Out = 25;
processParser.RULE_s3In = 26;
processParser.RULE_s3Path = 27;
processParser.RULE_s3Component = 28;
processParser.RULE_s3AnyName = 29;
processParser.RULE_outOpts = 30;
processParser.RULE_s3outOpts = 31;
processParser.RULE_inOpts = 32;
processParser.RULE_s3inOpts = 33;
processParser.RULE_inSelect = 34;
processParser.RULE_database = 35;
processParser.RULE_delim = 36;
processParser.RULE_delimiters = 37;
processParser.RULE_execWhen = 38;
processParser.RULE_whenList = 39;
processParser.RULE_whenTag = 40;
processParser.RULE_pg = 41;
processParser.RULE_mssql = 42;
processParser.RULE_csv = 43;
processParser.RULE_s3 = 44;
processParser.RULE_bulkStatement = 45;
processParser.RULE_bulkOpts = 46;
processParser.RULE_checkConstraints = 47;
processParser.RULE_fireTriggers = 48;
processParser.RULE_keepNulls = 49;
processParser.RULE_kiloBytesPerBatch = 50;
processParser.RULE_rowsPerBatch = 51;
processParser.RULE_order = 52;
processParser.RULE_tabLock = 53;
processParser.RULE_nodeOpts = 54;
processParser.RULE_sasOpts = 55;
processParser.RULE_sascmd = 56;
processParser.RULE_sasFile = 57;
processParser.RULE_workDir = 58;
processParser.RULE_dirList = 59;
processParser.RULE_dir = 60;
processParser.RULE_scenario = 61;
processParser.RULE_framework = 62;
processParser.RULE_sasIn = 63;
processParser.RULE_sasOut = 64;
processParser.RULE_sasQueueOpts = 65;
processParser.RULE_dsName = 66;
processParser.RULE_dataSet = 67;
processParser.RULE_partitioned = 68;
processParser.RULE_nameSolo = 69;
processParser.RULE_number = 70;
processParser.RULE_inputQueues = 71;
processParser.RULE_outputQueues = 72;
processParser.RULE_nodesInputQueues = 73;
processParser.RULE_mergeList = 74;
processParser.RULE_nameOrList = 75;
processParser.RULE_queue = 76;
processParser.RULE_namedParameter = 77;
processParser.RULE_queueList = 78;
processParser.RULE_nameDescr = 79;
processParser.RULE_nameDescrPredict = 80;
processParser.RULE_predict = 81;
processParser.RULE_compress = 82;
processParser.RULE_minimize = 83;
processParser.RULE_syntaxVersion = 84;
processParser.RULE_trueFalse = 85;
processParser.RULE_name = 86;
processParser.RULE_descr = 87;
processParser.RULE_quoteString = 88;
processParser.RULE_setSig = 89;
processParser.RULE_getSig = 90;
processParser.RULE_setFact = 91;
processParser.RULE_getFact = 92;
processParser.RULE_lang = 93;
processParser.RULE_anyName = 94;
processParser.RULE_path = 95;
processParser.RULE_everythingSemi = 96;
processParser.RULE_where = 97;
processParser.RULE_writeMode = 98;
processParser.RULE_keyword = 99;

class ParseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_parse;
    }

	EOF() {
	    return this.getToken(processParser.EOF, 0);
	};

	processStmtList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcessStmtListContext);
	    } else {
	        return this.getTypedRuleContext(ProcessStmtListContext,i);
	    }
	};

	parseerror = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParseerrorContext);
	    } else {
	        return this.getTypedRuleContext(ParseerrorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterParse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitParse(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitParse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParseerrorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_parseerror;
    }

	UNEXPECTED_CHAR() {
	    return this.getToken(processParser.UNEXPECTED_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterParseerror(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitParseerror(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitParseerror(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcessStmtListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_processStmtList;
    }

	nameStmt() {
	    return this.getTypedRuleContext(NameStmtContext,0);
	};

	descrStmt() {
	    return this.getTypedRuleContext(DescrStmtContext,0);
	};

	typeStmt() {
	    return this.getTypedRuleContext(TypeStmtContext,0);
	};

	process() {
	    return this.getTypedRuleContext(ProcessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterProcessStmtList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitProcessStmtList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitProcessStmtList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_process;
    }

	inStmt() {
	    return this.getTypedRuleContext(InStmtContext,0);
	};

	outStmt() {
	    return this.getTypedRuleContext(OutStmtContext,0);
	};

	nodeStmt() {
	    return this.getTypedRuleContext(NodeStmtContext,0);
	};

	sqlStmt() {
	    return this.getTypedRuleContext(SqlStmtContext,0);
	};

	sasStmt() {
	    return this.getTypedRuleContext(SasStmtContext,0);
	};

	SINGLE_LINE_COMMENT() {
	    return this.getToken(processParser.SINGLE_LINE_COMMENT, 0);
	};

	MULTILINE_COMMENT() {
	    return this.getToken(processParser.MULTILINE_COMMENT, 0);
	};

	NEWLINE() {
	    return this.getToken(processParser.NEWLINE, 0);
	};

	subprocess() {
	    return this.getTypedRuleContext(SubprocessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterProcess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitProcess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitProcess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nameStmt;
    }

	NAME() {
	    return this.getToken(processParser.NAME, 0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNameStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNameStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNameStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescrStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_descrStmt;
    }

	DESCR() {
	    return this.getToken(processParser.DESCR, 0);
	};

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDescrStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDescrStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDescrStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_typeStmt;
    }

	TYPE() {
	    return this.getToken(processParser.TYPE, 0);
	};

	processType() {
	    return this.getTypedRuleContext(ProcessTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterTypeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitTypeStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitTypeStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcessTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_processType;
    }

	MODEL() {
	    return this.getToken(processParser.MODEL, 0);
	};

	REPORT() {
	    return this.getToken(processParser.REPORT, 0);
	};

	DEFAULT() {
	    return this.getToken(processParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterProcessType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitProcessType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitProcessType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubprocessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_subprocess;
    }

	processStmt() {
	    return this.getTypedRuleContext(ProcessStmtContext,0);
	};

	process = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcessContext);
	    } else {
	        return this.getTypedRuleContext(ProcessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSubprocess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSubprocess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSubprocess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_inStmt;
    }

	IN() {
	    return this.getToken(processParser.IN, 0);
	};

	INPUT() {
	    return this.getToken(processParser.INPUT, 0);
	};

	s3In() {
	    return this.getTypedRuleContext(S3InContext,0);
	};

	csvIn() {
	    return this.getTypedRuleContext(CsvInContext,0);
	};

	pgIn() {
	    return this.getTypedRuleContext(PgInContext,0);
	};

	sasInput() {
	    return this.getTypedRuleContext(SasInputContext,0);
	};

	inOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InOptsContext);
	    } else {
	        return this.getTypedRuleContext(InOptsContext,i);
	    }
	};

	s3inOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(S3inOptsContext);
	    } else {
	        return this.getTypedRuleContext(S3inOptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterInStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitInStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitInStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OutStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_outStmt;
    }

	OUT() {
	    return this.getToken(processParser.OUT, 0);
	};

	OUTPUT() {
	    return this.getToken(processParser.OUTPUT, 0);
	};

	s3Out() {
	    return this.getTypedRuleContext(S3OutContext,0);
	};

	csvOut() {
	    return this.getTypedRuleContext(CsvOutContext,0);
	};

	pgOut() {
	    return this.getTypedRuleContext(PgOutContext,0);
	};

	outOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OutOptsContext);
	    } else {
	        return this.getTypedRuleContext(OutOptsContext,i);
	    }
	};

	s3outOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(S3outOptsContext);
	    } else {
	        return this.getTypedRuleContext(S3outOptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterOutStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitOutStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitOutStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nodeStmt;
    }

	NODE() {
	    return this.getToken(processParser.NODE, 0);
	};

	nameSolo() {
	    return this.getTypedRuleContext(NameSoloContext,0);
	};

	nodesInputQueues() {
	    return this.getTypedRuleContext(NodesInputQueuesContext,0);
	};

	outputQueues() {
	    return this.getTypedRuleContext(OutputQueuesContext,0);
	};

	nodeOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NodeOptsContext);
	    } else {
	        return this.getTypedRuleContext(NodeOptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNodeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNodeStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNodeStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sqlStmt;
    }

	SQL() {
	    return this.getToken(processParser.SQL, 0);
	};

	everythingSemi() {
	    return this.getTypedRuleContext(EverythingSemiContext,0);
	};

	nameDescrPredict() {
	    return this.getTypedRuleContext(NameDescrPredictContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSqlStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSqlStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSqlStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SasStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sasStmt;
    }

	SAS() {
	    return this.getToken(processParser.SAS, 0);
	};

	sasIn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SasInContext);
	    } else {
	        return this.getTypedRuleContext(SasInContext,i);
	    }
	};

	sasOut = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SasOutContext);
	    } else {
	        return this.getTypedRuleContext(SasOutContext,i);
	    }
	};

	sasOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SasOptsContext);
	    } else {
	        return this.getTypedRuleContext(SasOptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSasStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSasStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSasStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcessStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_processStmt;
    }

	nameSolo() {
	    return this.getTypedRuleContext(NameSoloContext,0);
	};

	SUBPROCESS() {
	    return this.getToken(processParser.SUBPROCESS, 0);
	};

	PROCESS() {
	    return this.getToken(processParser.PROCESS, 0);
	};

	inputQueues() {
	    return this.getTypedRuleContext(InputQueuesContext,0);
	};

	descr() {
	    return this.getTypedRuleContext(DescrContext,0);
	};

	outputQueues() {
	    return this.getTypedRuleContext(OutputQueuesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterProcessStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitProcessStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitProcessStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CsvInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_csvIn;
    }

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterCsvIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitCsvIn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitCsvIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PgInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_pgIn;
    }

	pgName() {
	    return this.getTypedRuleContext(PgNameContext,0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPgIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPgIn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPgIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SasInputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sasInput;
        this.dataset = null;
        this.queueName = null;
    }

	datasetName() {
	    return this.getTypedRuleContext(DatasetNameContext,0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSasInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSasInput(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSasInput(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatasetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_datasetName;
    }

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDatasetName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDatasetName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDatasetName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CsvOutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_csvOut;
    }

	csvOutName() {
	    return this.getTypedRuleContext(CsvOutNameContext,0);
	};

	csvFile() {
	    return this.getTypedRuleContext(CsvFileContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterCsvOut(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitCsvOut(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitCsvOut(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CsvFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_csvFile;
    }

	anyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnyNameContext);
	    } else {
	        return this.getTypedRuleContext(AnyNameContext,i);
	    }
	};

	VAR() {
	    return this.getToken(processParser.VAR, 0);
	};

	OPT() {
	    return this.getToken(processParser.OPT, 0);
	};

	DYN() {
	    return this.getToken(processParser.DYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterCsvFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitCsvFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitCsvFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CsvOutNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_csvOutName;
    }

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterCsvOutName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitCsvOutName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitCsvOutName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PgOutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_pgOut;
    }

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	pgName() {
	    return this.getTypedRuleContext(PgNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPgOut(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPgOut(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPgOut(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PgNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_pgName;
    }

	pgAnyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PgAnyNameContext);
	    } else {
	        return this.getTypedRuleContext(PgAnyNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPgName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPgName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPgName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PgAnyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_pgAnyName;
    }

	IDENTIFIER() {
	    return this.getToken(processParser.IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPgAnyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPgAnyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPgAnyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3OutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3Out;
        this.s3Input = null;
    }

	s3Path() {
	    return this.getTypedRuleContext(S3PathContext,0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3Out(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3Out(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3Out(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3InContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3In;
        this.s3Output = null;
    }

	s3Path() {
	    return this.getTypedRuleContext(S3PathContext,0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3In(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3In(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3In(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3Path;
    }

	s3Component = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(S3ComponentContext);
	    } else {
	        return this.getTypedRuleContext(S3ComponentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3Path(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3Path(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3Path(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3ComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3Component;
    }

	s3AnyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(S3AnyNameContext);
	    } else {
	        return this.getTypedRuleContext(S3AnyNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3Component(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3Component(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3Component(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3AnyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3AnyName;
    }

	anyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnyNameContext);
	    } else {
	        return this.getTypedRuleContext(AnyNameContext,i);
	    }
	};

	VAR() {
	    return this.getToken(processParser.VAR, 0);
	};

	OPT() {
	    return this.getToken(processParser.OPT, 0);
	};

	DYN() {
	    return this.getToken(processParser.DYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3AnyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3AnyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3AnyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OutOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_outOpts;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	descr() {
	    return this.getTypedRuleContext(DescrContext,0);
	};

	compress() {
	    return this.getTypedRuleContext(CompressContext,0);
	};

	database() {
	    return this.getTypedRuleContext(DatabaseContext,0);
	};

	execWhen() {
	    return this.getTypedRuleContext(ExecWhenContext,0);
	};

	getFact() {
	    return this.getTypedRuleContext(GetFactContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterOutOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitOutOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitOutOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3outOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3outOpts;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	descr() {
	    return this.getTypedRuleContext(DescrContext,0);
	};

	compress() {
	    return this.getTypedRuleContext(CompressContext,0);
	};

	execWhen() {
	    return this.getTypedRuleContext(ExecWhenContext,0);
	};

	getFact() {
	    return this.getTypedRuleContext(GetFactContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	writeMode() {
	    return this.getTypedRuleContext(WriteModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3outOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3outOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3outOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_inOpts;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	descr() {
	    return this.getTypedRuleContext(DescrContext,0);
	};

	database() {
	    return this.getTypedRuleContext(DatabaseContext,0);
	};

	delim() {
	    return this.getTypedRuleContext(DelimContext,0);
	};

	inSelect() {
	    return this.getTypedRuleContext(InSelectContext,0);
	};

	getSig() {
	    return this.getTypedRuleContext(GetSigContext,0);
	};

	getFact() {
	    return this.getTypedRuleContext(GetFactContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterInOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitInOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitInOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3inOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3inOpts;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	descr() {
	    return this.getTypedRuleContext(DescrContext,0);
	};

	compress() {
	    return this.getTypedRuleContext(CompressContext,0);
	};

	getFact() {
	    return this.getTypedRuleContext(GetFactContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3inOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3inOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3inOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_inSelect;
    }

	SELECT() {
	    return this.getToken(processParser.SELECT, 0);
	};

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterInSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitInSelect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitInSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_database;
    }

	DB() {
	    return this.getToken(processParser.DB, 0);
	};

	pg() {
	    return this.getTypedRuleContext(PgContext,0);
	};

	mssql() {
	    return this.getTypedRuleContext(MssqlContext,0);
	};

	csv() {
	    return this.getTypedRuleContext(CsvContext,0);
	};

	SAS() {
	    return this.getToken(processParser.SAS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelimContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_delim;
    }

	DELIM() {
	    return this.getToken(processParser.DELIM, 0);
	};

	delimiters() {
	    return this.getTypedRuleContext(DelimitersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDelim(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDelim(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDelim(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelimitersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_delimiters;
    }


	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDelimiters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDelimiters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDelimiters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecWhenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_execWhen;
    }

	EXEC_WHEN() {
	    return this.getToken(processParser.EXEC_WHEN, 0);
	};

	whenList() {
	    return this.getTypedRuleContext(WhenListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterExecWhen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitExecWhen(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitExecWhen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_whenList;
    }

	whenTag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenTagContext);
	    } else {
	        return this.getTypedRuleContext(WhenTagContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterWhenList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitWhenList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitWhenList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenTagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_whenTag;
    }

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterWhenTag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitWhenTag(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitWhenTag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_pg;
    }

	PG() {
	    return this.getToken(processParser.PG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MssqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_mssql;
    }

	MSSQL() {
	    return this.getToken(processParser.MSSQL, 0);
	};

	bulkStatement() {
	    return this.getTypedRuleContext(BulkStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterMssql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitMssql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitMssql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CsvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_csv;
    }

	CSV() {
	    return this.getToken(processParser.CSV, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterCsv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitCsv(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitCsv(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class S3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_s3;
    }

	S3() {
	    return this.getToken(processParser.S3, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterS3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitS3(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitS3(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BulkStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_bulkStatement;
    }

	bulkOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BulkOptsContext);
	    } else {
	        return this.getTypedRuleContext(BulkOptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterBulkStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitBulkStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitBulkStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BulkOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_bulkOpts;
    }

	checkConstraints() {
	    return this.getTypedRuleContext(CheckConstraintsContext,0);
	};

	fireTriggers() {
	    return this.getTypedRuleContext(FireTriggersContext,0);
	};

	keepNulls() {
	    return this.getTypedRuleContext(KeepNullsContext,0);
	};

	kiloBytesPerBatch() {
	    return this.getTypedRuleContext(KiloBytesPerBatchContext,0);
	};

	rowsPerBatch() {
	    return this.getTypedRuleContext(RowsPerBatchContext,0);
	};

	order() {
	    return this.getTypedRuleContext(OrderContext,0);
	};

	tabLock() {
	    return this.getTypedRuleContext(TabLockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterBulkOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitBulkOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitBulkOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CheckConstraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_checkConstraints;
    }

	CHECK_CONSTRAINTS() {
	    return this.getToken(processParser.CHECK_CONSTRAINTS, 0);
	};

	trueFalse() {
	    return this.getTypedRuleContext(TrueFalseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterCheckConstraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitCheckConstraints(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitCheckConstraints(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FireTriggersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_fireTriggers;
    }

	FIRE_TRIGGERS() {
	    return this.getToken(processParser.FIRE_TRIGGERS, 0);
	};

	trueFalse() {
	    return this.getTypedRuleContext(TrueFalseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterFireTriggers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitFireTriggers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitFireTriggers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeepNullsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_keepNulls;
    }

	KEEP_NULLS() {
	    return this.getToken(processParser.KEEP_NULLS, 0);
	};

	trueFalse() {
	    return this.getTypedRuleContext(TrueFalseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterKeepNulls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitKeepNulls(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitKeepNulls(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KiloBytesPerBatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_kiloBytesPerBatch;
    }

	KB() {
	    return this.getToken(processParser.KB, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterKiloBytesPerBatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitKiloBytesPerBatch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitKiloBytesPerBatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowsPerBatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_rowsPerBatch;
    }

	ROWS() {
	    return this.getToken(processParser.ROWS, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterRowsPerBatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitRowsPerBatch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitRowsPerBatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_order;
    }

	ORDER() {
	    return this.getToken(processParser.ORDER, 0);
	};

	nameOrList() {
	    return this.getTypedRuleContext(NameOrListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TabLockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_tabLock;
    }

	TABLOCK() {
	    return this.getToken(processParser.TABLOCK, 0);
	};

	trueFalse() {
	    return this.getTypedRuleContext(TrueFalseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterTabLock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitTabLock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitTabLock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nodeOpts;
    }

	descr() {
	    return this.getTypedRuleContext(DescrContext,0);
	};

	setSig() {
	    return this.getTypedRuleContext(SetSigContext,0);
	};

	getSig() {
	    return this.getTypedRuleContext(GetSigContext,0);
	};

	setFact() {
	    return this.getTypedRuleContext(SetFactContext,0);
	};

	getFact() {
	    return this.getTypedRuleContext(GetFactContext,0);
	};

	lang() {
	    return this.getTypedRuleContext(LangContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNodeOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNodeOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNodeOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SasOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sasOpts;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	descr() {
	    return this.getTypedRuleContext(DescrContext,0);
	};

	sascmd() {
	    return this.getTypedRuleContext(SascmdContext,0);
	};

	sasFile() {
	    return this.getTypedRuleContext(SasFileContext,0);
	};

	getFact() {
	    return this.getTypedRuleContext(GetFactContext,0);
	};

	getSig() {
	    return this.getTypedRuleContext(GetSigContext,0);
	};

	workDir() {
	    return this.getTypedRuleContext(WorkDirContext,0);
	};

	scenario() {
	    return this.getTypedRuleContext(ScenarioContext,0);
	};

	framework() {
	    return this.getTypedRuleContext(FrameworkContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSasOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSasOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSasOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SascmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sascmd;
    }

	SASCMD() {
	    return this.getToken(processParser.SASCMD, 0);
	};

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSascmd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSascmd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSascmd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SasFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sasFile;
    }

	SASFILE() {
	    return this.getToken(processParser.SASFILE, 0);
	};

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSasFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSasFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSasFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WorkDirContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_workDir;
    }

	SASWORK() {
	    return this.getToken(processParser.SASWORK, 0);
	};

	dirList() {
	    return this.getTypedRuleContext(DirListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterWorkDir(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitWorkDir(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitWorkDir(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DirListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_dirList;
    }

	dir = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirContext);
	    } else {
	        return this.getTypedRuleContext(DirContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDirList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDirList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDirList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DirContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_dir;
    }

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDir(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDir(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDir(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScenarioContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_scenario;
    }

	SCENARIODS() {
	    return this.getToken(processParser.SCENARIODS, 0);
	};

	dataSet() {
	    return this.getTypedRuleContext(DataSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterScenario(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitScenario(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitScenario(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FrameworkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_framework;
    }

	FRAMEWORK() {
	    return this.getToken(processParser.FRAMEWORK, 0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterFramework(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitFramework(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitFramework(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SasInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sasIn;
    }

	queue() {
	    return this.getTypedRuleContext(QueueContext,0);
	};

	sasQueueOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SasQueueOptsContext);
	    } else {
	        return this.getTypedRuleContext(SasQueueOptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSasIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSasIn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSasIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SasOutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sasOut;
    }

	queue() {
	    return this.getTypedRuleContext(QueueContext,0);
	};

	sasQueueOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SasQueueOptsContext);
	    } else {
	        return this.getTypedRuleContext(SasQueueOptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSasOut(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSasOut(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSasOut(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SasQueueOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_sasQueueOpts;
    }

	dsName() {
	    return this.getTypedRuleContext(DsNameContext,0);
	};

	partitioned() {
	    return this.getTypedRuleContext(PartitionedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSasQueueOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSasQueueOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSasQueueOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DsNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_dsName;
    }

	dataSet() {
	    return this.getTypedRuleContext(DataSetContext,0);
	};

	DS() {
	    return this.getToken(processParser.DS, 0);
	};

	DATASET() {
	    return this.getToken(processParser.DATASET, 0);
	};

	DSN() {
	    return this.getToken(processParser.DSN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDsName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDsName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDsName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_dataSet;
    }

	anyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnyNameContext);
	    } else {
	        return this.getTypedRuleContext(AnyNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDataSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDataSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDataSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_partitioned;
    }

	PART() {
	    return this.getToken(processParser.PART, 0);
	};

	PARTITIONED() {
	    return this.getToken(processParser.PARTITIONED, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPartitioned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPartitioned(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPartitioned(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameSoloContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nameSolo;
    }

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNameSolo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNameSolo(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNameSolo(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_number;
    }

	NUMBER() {
	    return this.getToken(processParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNumber(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNumber(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InputQueuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_inputQueues;
    }

	queueList() {
	    return this.getTypedRuleContext(QueueListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterInputQueues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitInputQueues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitInputQueues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OutputQueuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_outputQueues;
    }

	queueList() {
	    return this.getTypedRuleContext(QueueListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterOutputQueues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitOutputQueues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitOutputQueues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodesInputQueuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nodesInputQueues;
        this.mergeLst = null;
    }

	mergeList() {
	    return this.getTypedRuleContext(MergeListContext,0);
	};

	queue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueueContext);
	    } else {
	        return this.getTypedRuleContext(QueueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNodesInputQueues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNodesInputQueues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNodesInputQueues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_mergeList;
    }

	queue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueueContext);
	    } else {
	        return this.getTypedRuleContext(QueueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterMergeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitMergeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitMergeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameOrListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nameOrList;
    }

	anyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnyNameContext);
	    } else {
	        return this.getTypedRuleContext(AnyNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNameOrList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNameOrList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNameOrList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_queue;
    }

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	namedParameter() {
	    return this.getTypedRuleContext(NamedParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterQueue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitQueue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitQueue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamedParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_namedParameter;
    }

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNamedParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNamedParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNamedParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_queueList;
    }

	queue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueueContext);
	    } else {
	        return this.getTypedRuleContext(QueueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterQueueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitQueueList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitQueueList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameDescrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nameDescr;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	descr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DescrContext);
	    } else {
	        return this.getTypedRuleContext(DescrContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNameDescr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNameDescr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNameDescr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameDescrPredictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_nameDescrPredict;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	descr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DescrContext);
	    } else {
	        return this.getTypedRuleContext(DescrContext,i);
	    }
	};

	predict = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredictContext);
	    } else {
	        return this.getTypedRuleContext(PredictContext,i);
	    }
	};

	setFact = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetFactContext);
	    } else {
	        return this.getTypedRuleContext(SetFactContext,i);
	    }
	};

	getFact = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GetFactContext);
	    } else {
	        return this.getTypedRuleContext(GetFactContext,i);
	    }
	};

	minimize = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MinimizeContext);
	    } else {
	        return this.getTypedRuleContext(MinimizeContext,i);
	    }
	};

	syntaxVersion = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxVersionContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxVersionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterNameDescrPredict(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitNameDescrPredict(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitNameDescrPredict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_predict;
    }

	PREDICT() {
	    return this.getToken(processParser.PREDICT, 0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPredict(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPredict(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPredict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompressContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_compress;
    }

	COMPRESS() {
	    return this.getToken(processParser.COMPRESS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterCompress(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitCompress(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitCompress(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MinimizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_minimize;
    }

	MINIMIZE() {
	    return this.getToken(processParser.MINIMIZE, 0);
	};

	MEMORY() {
	    return this.getToken(processParser.MEMORY, 0);
	};

	TIME() {
	    return this.getToken(processParser.TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterMinimize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitMinimize(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitMinimize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SyntaxVersionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_syntaxVersion;
    }

	SYNTAX_VERSION() {
	    return this.getToken(processParser.SYNTAX_VERSION, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSyntaxVersion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSyntaxVersion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSyntaxVersion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrueFalseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_trueFalse;
    }

	TRUE() {
	    return this.getToken(processParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(processParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterTrueFalse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitTrueFalse(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitTrueFalse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_name;
    }

	NAME() {
	    return this.getToken(processParser.NAME, 0);
	};

	anyName() {
	    return this.getTypedRuleContext(AnyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_descr;
    }

	DESCR() {
	    return this.getToken(processParser.DESCR, 0);
	};

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterDescr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitDescr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitDescr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuoteStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_quoteString;
    }

	STRING() {
	    return this.getToken(processParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterQuoteString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitQuoteString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitQuoteString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetSigContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_setSig;
    }

	SETSIG() {
	    return this.getToken(processParser.SETSIG, 0);
	};

	nameOrList() {
	    return this.getTypedRuleContext(NameOrListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSetSig(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSetSig(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSetSig(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetSigContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_getSig;
    }

	GETSIG() {
	    return this.getToken(processParser.GETSIG, 0);
	};

	nameOrList() {
	    return this.getTypedRuleContext(NameOrListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterGetSig(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitGetSig(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitGetSig(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetFactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_setFact;
    }

	nameOrList() {
	    return this.getTypedRuleContext(NameOrListContext,0);
	};

	SETFACT() {
	    return this.getToken(processParser.SETFACT, 0);
	};

	SETDYN() {
	    return this.getToken(processParser.SETDYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterSetFact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitSetFact(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitSetFact(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetFactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_getFact;
    }

	nameOrList() {
	    return this.getTypedRuleContext(NameOrListContext,0);
	};

	GETFACT() {
	    return this.getToken(processParser.GETFACT, 0);
	};

	GETDYN() {
	    return this.getToken(processParser.GETDYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterGetFact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitGetFact(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitGetFact(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LangContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_lang;
    }

	LANG() {
	    return this.getToken(processParser.LANG, 0);
	};

	PYTHON() {
	    return this.getToken(processParser.PYTHON, 0);
	};

	GO() {
	    return this.getToken(processParser.GO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterLang(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitLang(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitLang(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_anyName;
    }

	IDENTIFIER() {
	    return this.getToken(processParser.IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterAnyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitAnyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitAnyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_path;
    }

	anyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnyNameContext);
	    } else {
	        return this.getTypedRuleContext(AnyNameContext,i);
	    }
	};

	VAR() {
	    return this.getToken(processParser.VAR, 0);
	};

	OPT() {
	    return this.getToken(processParser.OPT, 0);
	};

	DYN() {
	    return this.getToken(processParser.DYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EverythingSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_everythingSemi;
    }

	SQLSTMTSEMICOLON() {
	    return this.getToken(processParser.SQLSTMTSEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterEverythingSemi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitEverythingSemi(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitEverythingSemi(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_where;
    }

	WHERE() {
	    return this.getToken(processParser.WHERE, 0);
	};

	quoteString() {
	    return this.getTypedRuleContext(QuoteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitWhere(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitWhere(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WriteModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_writeMode;
    }

	MODE() {
	    return this.getToken(processParser.MODE, 0);
	};

	APPEND() {
	    return this.getToken(processParser.APPEND, 0);
	};

	REPLACE() {
	    return this.getToken(processParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterWriteMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitWriteMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitWriteMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = processParser.RULE_keyword;
    }

	NAME() {
	    return this.getToken(processParser.NAME, 0);
	};

	EXEC_WHEN() {
	    return this.getToken(processParser.EXEC_WHEN, 0);
	};

	IN() {
	    return this.getToken(processParser.IN, 0);
	};

	OUT() {
	    return this.getToken(processParser.OUT, 0);
	};

	OUTPUT() {
	    return this.getToken(processParser.OUTPUT, 0);
	};

	INPUT() {
	    return this.getToken(processParser.INPUT, 0);
	};

	PROCESS() {
	    return this.getToken(processParser.PROCESS, 0);
	};

	SAS() {
	    return this.getToken(processParser.SAS, 0);
	};

	SQL() {
	    return this.getToken(processParser.SQL, 0);
	};

	SELECT() {
	    return this.getToken(processParser.SELECT, 0);
	};

	SASCMD() {
	    return this.getToken(processParser.SASCMD, 0);
	};

	COMPRESS() {
	    return this.getToken(processParser.COMPRESS, 0);
	};

	SASFILE() {
	    return this.getToken(processParser.SASFILE, 0);
	};

	GETSIG() {
	    return this.getToken(processParser.GETSIG, 0);
	};

	SETSIG() {
	    return this.getToken(processParser.SETSIG, 0);
	};

	GETFACT() {
	    return this.getToken(processParser.GETFACT, 0);
	};

	SETFACT() {
	    return this.getToken(processParser.SETFACT, 0);
	};

	LANG() {
	    return this.getToken(processParser.LANG, 0);
	};

	MODEL() {
	    return this.getToken(processParser.MODEL, 0);
	};

	MEMORY() {
	    return this.getToken(processParser.MEMORY, 0);
	};

	MINIMIZE() {
	    return this.getToken(processParser.MINIMIZE, 0);
	};

	PYTHON() {
	    return this.getToken(processParser.PYTHON, 0);
	};

	PREDICT() {
	    return this.getToken(processParser.PREDICT, 0);
	};

	GO() {
	    return this.getToken(processParser.GO, 0);
	};

	DB() {
	    return this.getToken(processParser.DB, 0);
	};

	DEFAULT() {
	    return this.getToken(processParser.DEFAULT, 0);
	};

	DELIM() {
	    return this.getToken(processParser.DELIM, 0);
	};

	DS() {
	    return this.getToken(processParser.DS, 0);
	};

	DSN() {
	    return this.getToken(processParser.DSN, 0);
	};

	DYN() {
	    return this.getToken(processParser.DYN, 0);
	};

	DATASET() {
	    return this.getToken(processParser.DATASET, 0);
	};

	MSSQL() {
	    return this.getToken(processParser.MSSQL, 0);
	};

	OPT() {
	    return this.getToken(processParser.OPT, 0);
	};

	ORDER() {
	    return this.getToken(processParser.ORDER, 0);
	};

	PART() {
	    return this.getToken(processParser.PART, 0);
	};

	PARTITIONED() {
	    return this.getToken(processParser.PARTITIONED, 0);
	};

	PG() {
	    return this.getToken(processParser.PG, 0);
	};

	REPORT() {
	    return this.getToken(processParser.REPORT, 0);
	};

	SASWORK() {
	    return this.getToken(processParser.SASWORK, 0);
	};

	SCENARIODS() {
	    return this.getToken(processParser.SCENARIODS, 0);
	};

	FRAMEWORK() {
	    return this.getToken(processParser.FRAMEWORK, 0);
	};

	SUBPROCESS() {
	    return this.getToken(processParser.SUBPROCESS, 0);
	};

	TIME() {
	    return this.getToken(processParser.TIME, 0);
	};

	TYPE() {
	    return this.getToken(processParser.TYPE, 0);
	};

	GETDYN() {
	    return this.getToken(processParser.GETDYN, 0);
	};

	SETDYN() {
	    return this.getToken(processParser.SETDYN, 0);
	};

	NODE() {
	    return this.getToken(processParser.NODE, 0);
	};

	CSV() {
	    return this.getToken(processParser.CSV, 0);
	};

	WHERE() {
	    return this.getToken(processParser.WHERE, 0);
	};

	VAR() {
	    return this.getToken(processParser.VAR, 0);
	};

	CHECK_CONSTRAINTS() {
	    return this.getToken(processParser.CHECK_CONSTRAINTS, 0);
	};

	FIRE_TRIGGERS() {
	    return this.getToken(processParser.FIRE_TRIGGERS, 0);
	};

	KEEP_NULLS() {
	    return this.getToken(processParser.KEEP_NULLS, 0);
	};

	KB() {
	    return this.getToken(processParser.KB, 0);
	};

	ROWS() {
	    return this.getToken(processParser.ROWS, 0);
	};

	TABLOCK() {
	    return this.getToken(processParser.TABLOCK, 0);
	};

	MODE() {
	    return this.getToken(processParser.MODE, 0);
	};

	APPEND() {
	    return this.getToken(processParser.APPEND, 0);
	};

	REPLACE() {
	    return this.getToken(processParser.REPLACE, 0);
	};

	SYNTAX_VERSION() {
	    return this.getToken(processParser.SYNTAX_VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof processListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof processVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




processParser.ParseContext = ParseContext; 
processParser.ParseerrorContext = ParseerrorContext; 
processParser.ProcessStmtListContext = ProcessStmtListContext; 
processParser.ProcessContext = ProcessContext; 
processParser.NameStmtContext = NameStmtContext; 
processParser.DescrStmtContext = DescrStmtContext; 
processParser.TypeStmtContext = TypeStmtContext; 
processParser.ProcessTypeContext = ProcessTypeContext; 
processParser.SubprocessContext = SubprocessContext; 
processParser.InStmtContext = InStmtContext; 
processParser.OutStmtContext = OutStmtContext; 
processParser.NodeStmtContext = NodeStmtContext; 
processParser.SqlStmtContext = SqlStmtContext; 
processParser.SasStmtContext = SasStmtContext; 
processParser.ProcessStmtContext = ProcessStmtContext; 
processParser.CsvInContext = CsvInContext; 
processParser.PgInContext = PgInContext; 
processParser.SasInputContext = SasInputContext; 
processParser.DatasetNameContext = DatasetNameContext; 
processParser.CsvOutContext = CsvOutContext; 
processParser.CsvFileContext = CsvFileContext; 
processParser.CsvOutNameContext = CsvOutNameContext; 
processParser.PgOutContext = PgOutContext; 
processParser.PgNameContext = PgNameContext; 
processParser.PgAnyNameContext = PgAnyNameContext; 
processParser.S3OutContext = S3OutContext; 
processParser.S3InContext = S3InContext; 
processParser.S3PathContext = S3PathContext; 
processParser.S3ComponentContext = S3ComponentContext; 
processParser.S3AnyNameContext = S3AnyNameContext; 
processParser.OutOptsContext = OutOptsContext; 
processParser.S3outOptsContext = S3outOptsContext; 
processParser.InOptsContext = InOptsContext; 
processParser.S3inOptsContext = S3inOptsContext; 
processParser.InSelectContext = InSelectContext; 
processParser.DatabaseContext = DatabaseContext; 
processParser.DelimContext = DelimContext; 
processParser.DelimitersContext = DelimitersContext; 
processParser.ExecWhenContext = ExecWhenContext; 
processParser.WhenListContext = WhenListContext; 
processParser.WhenTagContext = WhenTagContext; 
processParser.PgContext = PgContext; 
processParser.MssqlContext = MssqlContext; 
processParser.CsvContext = CsvContext; 
processParser.S3Context = S3Context; 
processParser.BulkStatementContext = BulkStatementContext; 
processParser.BulkOptsContext = BulkOptsContext; 
processParser.CheckConstraintsContext = CheckConstraintsContext; 
processParser.FireTriggersContext = FireTriggersContext; 
processParser.KeepNullsContext = KeepNullsContext; 
processParser.KiloBytesPerBatchContext = KiloBytesPerBatchContext; 
processParser.RowsPerBatchContext = RowsPerBatchContext; 
processParser.OrderContext = OrderContext; 
processParser.TabLockContext = TabLockContext; 
processParser.NodeOptsContext = NodeOptsContext; 
processParser.SasOptsContext = SasOptsContext; 
processParser.SascmdContext = SascmdContext; 
processParser.SasFileContext = SasFileContext; 
processParser.WorkDirContext = WorkDirContext; 
processParser.DirListContext = DirListContext; 
processParser.DirContext = DirContext; 
processParser.ScenarioContext = ScenarioContext; 
processParser.FrameworkContext = FrameworkContext; 
processParser.SasInContext = SasInContext; 
processParser.SasOutContext = SasOutContext; 
processParser.SasQueueOptsContext = SasQueueOptsContext; 
processParser.DsNameContext = DsNameContext; 
processParser.DataSetContext = DataSetContext; 
processParser.PartitionedContext = PartitionedContext; 
processParser.NameSoloContext = NameSoloContext; 
processParser.NumberContext = NumberContext; 
processParser.InputQueuesContext = InputQueuesContext; 
processParser.OutputQueuesContext = OutputQueuesContext; 
processParser.NodesInputQueuesContext = NodesInputQueuesContext; 
processParser.MergeListContext = MergeListContext; 
processParser.NameOrListContext = NameOrListContext; 
processParser.QueueContext = QueueContext; 
processParser.NamedParameterContext = NamedParameterContext; 
processParser.QueueListContext = QueueListContext; 
processParser.NameDescrContext = NameDescrContext; 
processParser.NameDescrPredictContext = NameDescrPredictContext; 
processParser.PredictContext = PredictContext; 
processParser.CompressContext = CompressContext; 
processParser.MinimizeContext = MinimizeContext; 
processParser.SyntaxVersionContext = SyntaxVersionContext; 
processParser.TrueFalseContext = TrueFalseContext; 
processParser.NameContext = NameContext; 
processParser.DescrContext = DescrContext; 
processParser.QuoteStringContext = QuoteStringContext; 
processParser.SetSigContext = SetSigContext; 
processParser.GetSigContext = GetSigContext; 
processParser.SetFactContext = SetFactContext; 
processParser.GetFactContext = GetFactContext; 
processParser.LangContext = LangContext; 
processParser.AnyNameContext = AnyNameContext; 
processParser.PathContext = PathContext; 
processParser.EverythingSemiContext = EverythingSemiContext; 
processParser.WhereContext = WhereContext; 
processParser.WriteModeContext = WriteModeContext; 
processParser.KeywordContext = KeywordContext; 
